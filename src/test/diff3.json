{
  "meta_a": {
    "name": "public/heu_assets/controllers/index/HomeIndexController.js",
    "content_type": "text/javascript",
    "lines": 3058,
    "web_links": [
      {
        "name": "gitweb",
        "url": "/gitweb?p\u003dphp_web_api_v0.git;hb\u003d544a54d74a51cd5e746b96b0b0171a5c11a36946;f\u003dpublic%2Fheu_assets%2Fcontrollers%2Findex%2FHomeIndexController.js"
      }
    ]
  },
  "meta_b": {
    "name": "public/heu_assets/controllers/index/HomeIndexController.js",
    "content_type": "text/javascript",
    "lines": 3080,
    "web_links": [
      {
        "name": "gitweb",
        "url": "/gitweb?p\u003dphp_web_api_v0.git;hb\u003drefs%2Fchanges%2F08%2F1208%2F1;f\u003dpublic%2Fheu_assets%2Fcontrollers%2Findex%2FHomeIndexController.js"
      }
    ]
  },
  "intraline_status": "OK",
  "change_type": "MODIFIED",
  "diff_header": [
    "diff --git a/public/heu_assets/controllers/index/HomeIndexController.js b/public/heu_assets/controllers/index/HomeIndexController.js",
    "index 287337a..baba0ba 100644",
    "--- a/public/heu_assets/controllers/index/HomeIndexController.js",
    "+++ b/public/heu_assets/controllers/index/HomeIndexController.js"
  ],
  "content": [
    {
      "ab": [
        "app.controller(\"HomeIndexController\",",
        "    [\"$scope\", \"$http\", \"$interval\", \"$timeout\", \"$stateParams\", \"$window\", \"$cacheFactory\", \"$filter\", \"ngTableParams\",",
        "        \"$element\", \"$uibModal\", \"$state\", \"MAuth\", \"Debug\", \"dept\", \"language\", \"$rootScope\", \"$HttpClient\", \"$location\", \"util\", \"gps\", \"Nav\", \"api\",",
        "        function ($scope, $http, $interval, $timeout, $stateParams, $window, $cacheFactory, $filter, ngTableParams,",
        "                  $element, $uibModal, $state, MAuth, Debug, dept, language, $rootScope, $HttpClient, $location, util, gps, Nav, api) {",
        "",
        "            /**------------------------------------------------------------新ui--------------------------------------------------------------------------------------------**/",
        "            var vm \u003d this;",
        "            require.config({",
        "                paths: {",
        "                    echarts: \u0027/centric/vendor/echarts\u0027",
        "                }",
        "            });  // 使用",
        "            $scope.languageDict \u003d $rootScope.languageDict;",
        "            $scope.language \u003d $rootScope.languageOption;",
        "            /*时间类型*/",
        "            vm.isTimeType \u003d 1;",
        "            vm.waiting \u003d false;",
        "            vm.waiting1 \u003d false;",
        "            vm.waiting2 \u003d false;",
        "            vm.waiting3 \u003d false;",
        "            vm.waiting4 \u003d false;",
        "            vm.waiting5 \u003d false;",
        "            vm.myAlert \u003d false;",
        "            vm.isShow \u003d false;",
        "            vm.isShow2 \u003d false;",
        "            vm.isShow3 \u003d false;",
        "            vm.bigFaultShow \u003d false;",
        "            vm.guZhangFaultShow \u003d false;",
        "            vm.showTime \u003d true;",
        "            vm.topTips \u003d false;",
        "            vm.alarmShow \u003d false;",
        "            vm.seriousShow \u003d false;",
        "            vm.echartsFualtTable \u003d false;",
        "            vm.guZhangFaultText \u003d \u0027故障分类比例\u0027;",
        "            vm.gaikuangAnquan_data \u003d {",
        "                \u0027batteryBreak\u0027: 0,",
        "                \u0027breakCar\u0027: 0,",
        "                \u0027breakTimes\u0027: 0,",
        "                \u0027overdue\u0027: 0,",
        "                \u0027seriousBreak\u0027: 0,",
        "                \u0027violationCar\u0027: 0,",
        "                \u0027violationCnt\u0027: 0,",
        "            };",
        "            vm.fault \u003d {",
        "                \u0027alarm\u0027: 0,",
        "                \u0027car\u0027: 0,",
        "                \u0027carInLineRank\u0027: 0,",
        "                \u0027ordinary\u0027: 0,",
        "                \u0027serious\u0027: 0,",
        "            };",
        "            vm.energy_consumption_data \u003d {",
        "                \u0027accruedMiles\u0027: 0,",
        "                \u0027hundredElec\u0027: 0,",
        "                \u0027hundredFule\u0027: 0,",
        "                \u0027hundredGas\u0027: 0,",
        "                \u0027runTime\u0027: 0,",
        "            };",
        "            vm.irregularities_method_data \u003d {",
        "                \u0027all\u0027: 0,",
        "                \u0027carCnt\u0027: 0,",
        "                \u0027driverCnt\u0027: 0,",
        "            };",
        "            var page \u003d 1;",
        "            var count \u003d 8;",
        "            var dt \u003d new Date();",
        "            var year \u003d dt.getFullYear() + \u0027-\u0027;",
        "            var month \u003d dt.getMonth() + 1 + \u0027-\u0027;",
        "            var day \u003d dt.getDate();",
        "            var ymd \u003d year + month + day;",
        "            vm._img \u003d {",
        "                up: \u0027/heu_assets/images/icon/up.png\u0027,",
        "                down: \u0027/heu_assets/images/icon/down.png\u0027,",
        "            };",
        "",
        "            var dateProYear \u003d dt.getFullYear();",
        "            var dateProMonth \u003d dt.getMonth() + 1;",
        "            let dateProDay \u003d dt.getDate();",
        "            vm.isDept_id \u003d \u0027\u0027;",
        "            vm.isLineName \u003d \u0027\u0027;",
        "            let dateProStart \u003d \u0027\u0027;",
        "            let dateProEnd \u003d \u0027\u0027;",
        "            vm.maxColNum \u003d 13;",
        "            let url \u003d \u0027/api/\u0027;",
        "            vm.faultText \u003d \u0027故障分类比例\u0027;",
        "",
        "            function isTreeNode() {",
        "                return vm.isDept_id \u003d\u003d \u0027\u0027;",
        "            }",
        "",
        "            function topTips() {",
        "                if (vm.topTips) return;",
        "                if (\u0027\u0027 \u003d\u003d vm.isLineName) {",
        "                    vm.topTips \u003d true;",
        "                    $timeout(function () {",
        "                        vm.topTips \u003d false;",
        "                    }, 2000);",
        "                }",
        "            }",
        "",
        "            /**",
        "             API: api/statistic/getBreakCarDetail （接口地址）",
        "             *@name: 首页--查询故障信息 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: post（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: page,description:页码",
        "             *parameter2: count,description:条数",
        "             *parameter3: deptid,description:线路id",
        "             *parameter4: depttype,description:查询类型",
        "             *parameter5: sortKey,description:排序类型",
        "             *parameter6: sortVal,description:升序降序",
        "             *parameter7: breaktype,description:查询类型",
        "             *parameter8: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.queryFault \u003d function (val, text) {",
        "                vm.alarmLevel \u003d \u0027\u0027;",
        "                if (isTreeNode()) {",
        "                    topTips();",
        "                    return;",
        "                }",
        "                switch (val) {",
        "                    case 1:",
        "                        vm.waiting4 \u003d true;",
        "                        break;",
        "                    case 2:",
        "                        vm.waiting2 \u003d true;",
        "                        break;",
        "                    case 3:",
        "                        vm.waiting3 \u003d true;",
        "                        if (text \u003d\u003d \u0027一般故障总数\u0027) {",
        "                            vm.alarmLevel \u003d 0;",
        "                        }",
        "                        break;",
        "                    case 4:",
        "                        vm.waiting5 \u003d true;",
        "                        vm.alarmLevel \u003d 2;",
        "                        break;",
        "                }",
        "                vm.tableParams \u003d new ngTableParams({",
        "                    page: page, // show first page",
        "                    count: count, // count per page",
        "                }, {",
        "                    // total: 0, // length of data",
        "                    getData: function ($defer, params) {",
        "                        let queryParams \u003d {",
        "                            page: params.page(), // 页码",
        "                            count: params.count(),// 行数",
        "                            depttype: \"lineDeptid\",// 类型",
        "                            deptid: vm.isDept_id,// 线路id",
        "                            sortKey: \"vehicleNo\",// 排序字段",
        "                            sortVal: \"ASC\", // 升序",
        "                            breaktype: \"动力总成\", // 类型",
        "                            timeType: vm.isTimeType, //时间类型",
        "                            alarmLevel: vm.alarmLevel",
        "                        };",
        "                        let callback \u003d function (ret) {",
        "                            params.total(ret.total);",
        "                            $defer.resolve(ret.body);",
        "                            vm.dataBody \u003d ret.body;",
        "                            vm.head \u003d ret.head;",
        "                        };",
        "                        callAPI(\u0027statistic/getBreakCarDetail\u0027, queryParams, 4, callback);",
        "",
        "                    }",
        "                });",
        "            };",
        "",
        "            // API调用公共函数",
        "            function callAPI(uri, params, type, callback) {",
        "                let ret;",
        "                $http({",
        "                    method: \u0027POST\u0027,",
        "                    url: url + uri,",
        "                    params: params",
        "                }).then(function (response) {",
        "                    if (response.data.retcode \u003d\u003d 1) {",
        "                        switch (type) {",
        "                            case 1://添加",
        "                            case 2://修改",
        "                            case 3://删除",
        "                                ret \u003d response.data;",
        "                                break;",
        "                            case 4://默认查询",
        "                            case 5://条件查询",
        "                            case 6://排序查询",
        "                                ret \u003d dataProcessOnSelect(response.data);",
        "                                break;",
        "                            case 7://排序查询",
        "                            default:",
        "                                ret \u003d response.data;",
        "                        }",
        "                        callback(ret);",
        "                    } else if (response.data.retcode \u003d\u003d 0) {",
        "                        alert(\"重复\");",
        "                    } else {",
        "                        console.error(\"位置错误\");",
        "                        console.error(response);",
        "                    }",
        "                }).finally(function () {",
        "",
        "                    vm.waiting \u003d false;",
        "                    vm.waiting1 \u003d false;",
        "                    vm.waiting2 \u003d false;",
        "                    vm.waiting3 \u003d false;",
        "                    vm.waiting4 \u003d false;",
        "                    vm.waiting5 \u003d false;",
        "                    vm.showDetail \u003d true;",
        "                    vm.faultTableShow \u003d true;",
        "                    // $(function () {",
        "                    //     $(\u0027#myModal\u0027).modal(\u0027hide\u0027)",
        "                    // });",
        "                });",
        "",
        "                return ret;",
        "            }",
        "",
        "",
        "            //  不良行驶行为",
        "            let mon, ye, yearParam;",
        "            vm.badDriving \u003d function (url) {",
        "                if (isTreeNode()) {",
        "                    topTips();",
        "                    return;",
        "                }",
        "",
        "                switch (vm.isTimeType) {",
        "                    case 0:",
        "                        dateProStart \u003d datePro(1);",
        "                        dateProEnd \u003d datePro(1);",
        "                        break;",
        "                    case 1:",
        "                        dateProStart \u003d datePro(7);",
        "                        dateProEnd \u003d datePro(1);",
        "                        break;",
        "                    case 2:",
        "                        mon \u003d dt.getMonth() + 1;",
        "                        mon \u003d addDate(mon);",
        "                        dateProStart \u003d year + mon + \u0027-\u0027 + \u002701\u0027;",
        "                        dateProEnd \u003d year + mon + \u0027-\u0027 + (day - 1);",
        "                        break;",
        "                    case 3:",
        "                        if (dt.getMonth() + 1 - 1 \u003e 0) {",
        "                            mon \u003d dt.getMonth() + 1 - 1;",
        "                            ye \u003d year;",
        "                            yearParam \u003d dt.getFullYear();",
        "                        } else {",
        "                            ye \u003d dt.getFullYear() - 1 + \u0027-\u0027;",
        "                            yearParam \u003d dt.getFullYear() - 1;",
        "                            mon \u003d 12;",
        "                        }",
        "                        let timeMon \u003d addDate(mon);",
        "                        let monDay \u003d addDay(yearParam, mon);",
        "                        dateProStart \u003d ye + timeMon + \u0027-01\u0027;",
        "                        dateProEnd \u003d ye + timeMon + \u0027-\u0027 + monDay;",
        "                        break;",
        "                    case 4:",
        "                        dateProStart \u003d year + \u002701\u0027 + \u0027-\u0027 + \u002701\u0027;",
        "                        yearParam \u003d yearsAndMonthPro(dt.getFullYear(), dt.getMonth() + 1);",
        "                        dateProEnd \u003d yearParam + \u0027-\u0027 + (day - 1);",
        "                        break;",
        "                    case 5:",
        "                        ye \u003d dt.getFullYear() - 1;",
        "                        dateProStart \u003d ye + \u0027-\u0027 + \u002701\u0027 + \u0027-\u0027 + \u002701\u0027;",
        "                        let monDay1 \u003d addDay(ye, 12);",
        "                        dateProEnd \u003d ye + \u0027-\u0027 + \u002712\u0027 + \u0027-\u0027 + monDay1;",
        "                        break;",
        "                }",
        "                Nav.setNavActive(url);",
        "                $timeout(function () {",
        "                    $rootScope.$broadcast(\u0027buliangxingshixingwei\u0027, {",
        "                        deptId: vm.isDept_id,",
        "                        identification: true,",
        "                        startTime: dateProStart,",
        "                        endTime: dateProEnd,",
        "                        lineName: vm.isLineName",
        "                    });",
        "                }, 1000);",
        "            };",
        "",
        "",
        "            // API调用公共函数",
        "            function callAPI2(uri, params, type, callback) {",
        "                var ret;",
        "                $http({",
        "                    method: \u0027POST\u0027,",
        "                    url: url + uri,",
        "                    params: params",
        "                }).then(function (response) {",
        "                    if (response.data.retcode \u003d\u003d 1) {",
        "                        switch (type) {",
        "                            case 1://添加",
        "                            case 2://修改",
        "                            case 3://删除",
        "                                ret \u003d response.data;",
        "                                break;",
        "                            case 4://默认查询",
        "                            case 5://条件查询",
        "                            case 6://排序查询",
        "                                ret \u003d dataProcessOnSelect2(response.data);",
        "                                break;",
        "                            default:",
        "                                ret \u003d response.data;",
        "                        }",
        "                        callback(ret);",
        "                    } else if (response.data.retcode \u003d\u003d 0) {",
        "                        alert(\"重复\");",
        "                    } else {",
        "                        console.error(\"未知错误\");",
        "                        console.error(response);",
        "                    }",
        "                }).finally(function () {",
        "                    $(\u0027#myModalT\u0027).modal(\u0027hide\u0027);",
        "                });",
        "                return ret;",
        "            }",
        "",
        "",
        "            // api数据处理",
        "            function dataProcessOnSelect2(data) {",
        "                if (undefined !\u003d data.data.body.flag) {",
        "                    vm.flag \u003d data.data.body[\u0027flag\u0027];",
        "                }",
        "                vm.selectlist \u003d false;",
        "                body \u003d data.data.body.data;",
        "                total \u003d data.data.body.total;",
        "                head \u003d data.data.head;",
        "                var sortedBody \u003d [];",
        "                for (var record \u003d 0; record \u003c body.length; record++) {",
        "                    var newRecord \u003d new Object();",
        "                    var count \u003d 0;",
        "                    for (var key \u003d 0; key \u003c head.length; key++) {",
        "                        var index \u003d (head[key].show \u003d\u003d 1) ? count++ : -1;",
        "                        var temp \u003d {",
        "                            \u0027data\u0027: (body[record][head[key].field] \u003d\u003d null) ? \u0027-\u0027 : body[record][head[key].field],",
        "                            \u0027show\u0027: head[key].show,",
        "                            \u0027field\u0027: head[key].field,",
        "                            \u0027index\u0027: index,",
        "                        };",
        "                        head[key].index \u003d index;",
        "                        newRecord[head[key].field] \u003d temp;",
        "                    }",
        "                    newRecord[\u0027checked\u0027] \u003d false;//存储页面表格前checkbox值",
        "                    sortedBody.push(newRecord);",
        "                }",
        "                vm.showFieldsSum \u003d 0;",
        "                for (var key \u003d 0; key \u003c head.length; key++) {",
        "                    if (head[key].show \u003d\u003d 1) {",
        "                        vm.showFieldsSum++",
        "                    }",
        "                }",
        "                vm.buttonDetail \u003d (vm.maxColNum \u003c vm.showFieldsSum) ? true : false;",
        "",
        "                let ret \u003d {\u0027head\u0027: head, \u0027body\u0027: sortedBody, \u0027total\u0027: total};",
        "                return ret;",
        "            }",
        "",
        "            /**",
        "             API: api/statistic/getBreakCarDetail （接口地址）",
        "             *@name: 首页--一般故障总数 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: post（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: page,description:页码",
        "             *parameter2: count,description:条数",
        "             *parameter3: deptid,description:线路id",
        "             *parameter4: depttype,description:查询类型",
        "             *parameter5: sortKey,description:排序类型",
        "             *parameter6: sortVal,description:升序降序",
        "             *parameter7: breaktype,description:查询类型",
        "             *parameter8: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.seriousFault \u003d function () {",
        "",
        "                vm.tableParams \u003d new ngTableParams({",
        "                    page: page, // show first page",
        "                    count: count, // count per page",
        "                }, {",
        "                    // total: 0, // length of data",
        "                    getData: function ($defer, params) {",
        "                        let queryParams \u003d {",
        "                            page: params.page(), // 页码",
        "                            count: params.count(),// 行数",
        "                            depttype: \"lineDeptid\", // 查询类型",
        "                            deptid: vm.isDept_id, // 线路id",
        "                            sortKey: \"vehicleNo\", // 排序字段",
        "                            sortVal: \"ASC\", // 升序",
        "                            breaktype: \"动力总成\", // 查询类型",
        "                            timeType: vm.isTimeType // 时间类型",
        "",
        "                        };",
        "                        let callback \u003d function (ret) {",
        "                            params.total(ret.total);",
        "                            $defer.resolve(ret.body);",
        "                            vm.dataBody \u003d ret.body;",
        "                            vm.head \u003d ret.head;",
        "                        };",
        "                        callAPI(\u0027statistic/getBreakCarDetail\u0027, queryParams, 4, callback);",
        "",
        "                    }",
        "                });",
        "            };",
        "",
        "            /**",
        "             API: api/dashboard/getFirstPageExpireList （接口地址）",
        "             *@name: 首页--维保过期 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: post（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: page,description:页码",
        "             *parameter2: count,description:条数",
        "             *parameter3: deptid,description:线路id",
        "             *parameter5: sortKey,description:排序类型",
        "             *parameter6: sortVal,description:升序降序",
        "             *parameter7: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.maintenanceExpired \u003d function () {",
        "",
        "                if (isTreeNode()) {",
        "                    topTips();",
        "                    return;",
        "                }",
        "                vm.waiting1 \u003d true;",
        "                vm.tableParams \u003d new ngTableParams({",
        "                    page: page, // show first page",
        "                    count: count, // count per page",
        "                }, {",
        "                    // total: 0, // length of data",
        "                    getData: function ($defer, params) {",
        "                        let queryParams \u003d {",
        "                            page: params.page(), // 页码",
        "                            count: params.count(), // 行数",
        "                            deptId: vm.isDept_id, // 查询id",
        "                            sortKey: \"vehicleNo\", // 排序字段",
        "                            sortVal: \"ASC\", // 升序",
        "                            timeType: vm.isTimeType // 时间类型",
        "                        };",
        "                        let callback \u003d function (ret) {",
        "                            params.total(ret.total);",
        "                            $defer.resolve(ret.body);",
        "                            vm.dataBody \u003d ret.body;",
        "                            vm.head \u003d ret.head;",
        "                        };",
        "                        callAPI(\u0027dashboard/getFirstPageExpireList\u0027, queryParams, 4, callback);",
        "",
        "                    }",
        "                });",
        "",
        "            };",
        "",
        "            /**",
        "             API: api/dashboard/getSeriesDetailList （接口地址）",
        "             *@name: 首页--严重故障 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: post（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: page,description:页码",
        "             *parameter2: count,description:条数",
        "             *parameter3: deptid,description:线路id",
        "             *parameter5: sortKey,description:排序类型",
        "             *parameter6: sortVal,description:升序降序",
        "             *parameter7: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.getSeriesData \u003d () \u003d\u003e {",
        "",
        "                if (isTreeNode()) {",
        "                    topTips();",
        "                    return;",
        "                }",
        "                vm.waiting \u003d true;",
        "",
        "                vm.tableParams \u003d new ngTableParams({",
        "                    page: page, // show first page",
        "                    count: count, // count per page",
        "                }, {",
        "                    // total: 0, // length of data",
        "                    getData: function ($defer, params) {",
        "                        let queryParams \u003d {",
        "                            page: params.page(), // 页码",
        "                            count: params.count(), // 行数",
        "                            deptId: vm.isDept_id, // 查询id",
        "                            sortKey: \"vehicleNo\",// 排序字段",
        "                            sortVal: \"ASC\", // 升序",
        "                            timeType: vm.isTimeType // 时间类型",
        "                        };",
        "                        let callback \u003d function (ret) {",
        "                            params.total(ret.total);",
        "                            $defer.resolve(ret.body);",
        "                            vm.dataBody \u003d ret.body;",
        "                            vm.head \u003d ret.head;",
        "                        };",
        "                        callAPI(\u0027dashboard/getSeriesDetailList\u0027, queryParams, 4, callback);",
        "",
        "                    }",
        "                });",
        "",
        "            };",
        "",
        "",
        "            // api数据处理",
        "            function dataProcessOnSelect(data) {",
        "                vm.selectlist \u003d false;",
        "                body \u003d data.data.body.data;",
        "                total \u003d data.data.body.total;",
        "                head \u003d data.data.head;",
        "                let sortedBody \u003d [];",
        "                for (let record \u003d 0; record \u003c body.length; record++) {",
        "                    let newRecord \u003d new Object();",
        "                    var count \u003d 0;",
        "                    for (let key \u003d 0; key \u003c head.length; key++) {",
        "                        let index \u003d (head[key].show \u003d\u003d 1) ? count++ : -1;",
        "                        let temp \u003d {",
        "                            \u0027data\u0027: (body[record][head[key].field] \u003d\u003d null) ? \u0027-\u0027 : body[record][head[key].field],",
        "                            \u0027show\u0027: head[key].show,",
        "                            \u0027field\u0027: head[key].field,",
        "                            \u0027index\u0027: index,",
        "                        }",
        "                        head[key].index \u003d index;",
        "                        newRecord[head[key].field] \u003d temp;",
        "                    }",
        "                    // newRecord[ \u0027checked\u0027]\u003dfalse;//存储页面表格前checkbox值",
        "                    sortedBody.push(newRecord);",
        "                }",
        "                count \u003d 0;",
        "                for (let key \u003d 0; key \u003c head.length; key++) {",
        "                    if (head[key].show \u003d\u003d 1) {",
        "                        vm.showFieldsSum++",
        "                    }",
        "                    ;",
        "                    let index \u003d (head[key].show \u003d\u003d 1) ? count++ : -1;",
        "                    head[key].index \u003d index;",
        "                }",
        "                vm.showFieldsSum \u003d 0;",
        "                for (let key \u003d 0; key \u003c head.length; key++) {",
        "                    if (head[key].show \u003d\u003d 1) {",
        "                        vm.showFieldsSum++",
        "                    }",
        "                }",
        "                vm.buttonDetail \u003d (vm.maxColNum \u003c vm.showFieldsSum) ? true : false;",
        "",
        "                let ret \u003d {\u0027head\u0027: head, \u0027body\u0027: sortedBody, \u0027total\u0027: total};",
        "                return ret;",
        "            }",
        "",
        "            /*",
        "            * 能耗",
        "            * */",
        "            vm.energyJump \u003d function (url) {",
        "                if (isTreeNode()) {",
        "                    topTips();",
        "                    return;",
        "                }",
        "",
        "                switch (vm.isTimeType) {",
        "                    case 0:",
        "                        dateProStart \u003d datePro(1);",
        "                        dateProEnd \u003d datePro(1);",
        "                        break;",
        "                    case 1:",
        "                        dateProStart \u003d datePro(7);",
        "                        dateProEnd \u003d datePro(1);",
        "                        break;",
        "                    case 2:",
        "                        mon \u003d dt.getMonth() + 1;",
        "                        mon \u003d addDate(mon);",
        "                        dateProStart \u003d year + mon + \u0027-\u0027 + \u002701\u0027;",
        "                        dateProEnd \u003d year + mon + \u0027-\u0027 + (day - 1);",
        "                        break;",
        "                    case 3:",
        "                        if (dt.getMonth() + 1 - 1 \u003e 0) {",
        "                            mon \u003d dt.getMonth() + 1 - 1;",
        "                            ye \u003d year;",
        "                            yearParam \u003d dt.getFullYear();",
        "                        } else {",
        "                            ye \u003d dt.getFullYear() - 1 + \u0027-\u0027;",
        "                            yearParam \u003d dt.getFullYear() - 1;",
        "                            mon \u003d 12;",
        "                        }",
        "                        let timeMon \u003d addDate(mon);",
        "                        let monDay \u003d addDay(yearParam, mon);",
        "                        dateProStart \u003d ye + timeMon + \u0027-01\u0027;",
        "                        dateProEnd \u003d ye + timeMon + \u0027-\u0027 + monDay;",
        "                        break;",
        "                    case 4:",
        "                        dateProStart \u003d year + \u002701\u0027 + \u0027-\u0027 + \u002701\u0027;",
        "                        yearParam \u003d yearsAndMonthPro(dt.getFullYear(), dt.getMonth() + 1 - 1);",
        "                        dateProEnd \u003d yearParam + \u0027-\u0027 + (day - 1);",
        "                        break;",
        "                    case 5:",
        "                        ye \u003d dt.getFullYear() - 1;",
        "                        dateProStart \u003d ye + \u0027-\u0027 + \u002701\u0027 + \u0027-\u0027 + \u002701\u0027;",
        "                        monDay \u003d addDay(ye, 12);",
        "                        dateProEnd \u003d ye + \u0027-\u0027 + \u002712\u0027 + \u0027-\u0027 + monDay;",
        "                        break;",
        "                }",
        "                Nav.setNavActive(url);",
        "                $timeout(function () {",
        "                    $rootScope.$broadcast(\u0027nenghaoJUMP\u0027, {",
        "                        deptId: vm.isDept_id, timeType: vm.isTimeType, identification: true, lineName: vm.isLineName,",
        "                        startTime: dateProStart, endTime: dateProEnd",
        "                    });",
        "                }, 1000);",
        "            };",
        "",
        "            function yearsAndMonthPro(year, mon) {",
        "                let months;",
        "                let years;",
        "                if (mon \u003e 0) {",
        "                    months \u003d mon;",
        "                    years \u003d year;",
        "                } else {",
        "                    years \u003d dt.getFullYear() - 1;",
        "                    months \u003d 12;",
        "                }",
        "                months \u003d months \u003e 9 ? months : \u00270\u0027 + (months);",
        "                return years + \u0027-\u0027 + months",
        "            }",
        "",
        "            /*月份处理*/",
        "            function addDate(mon) {",
        "                let addMon \u003d mon \u003e 9 ? mon : \u00270\u0027 + mon;",
        "                return addMon;",
        "            }",
        "",
        "            /*获取默认天数*/",
        "            function addDay(ye, mon) {",
        "                let monDay \u003d new Date(ye, mon, 0);",
        "                return monDay.getDate();",
        "            }",
        "",
        "            function datePro(day) {",
        "                let end \u003d Date.parse(new Date(ymd));",
        "                let tmp \u003d end - day * 24 * 60 * 60 * 1000;",
        "                let da \u003d new Date(tmp);",
        "                let mon \u003d da.getMonth() + 1 \u003e 9 ? da.getMonth() + 1 : \u00270\u0027 + (da.getMonth() + 1);",
        "                let startDate \u003d da.getFullYear() + \u0027-\u0027 + mon + \u0027-\u0027 + da.getDate();",
        "                return startDate;",
        "            }",
        "",
        "            function getTime(timeStamp, flag, timeq) {",
        "",
        "                function add0(m) {",
        "                    return m \u003c 10 ? \u00270\u0027 + m : m",
        "                }",
        "",
        "                if (timeStamp \u003d\u003d null) {",
        "                    let timeStamp \u003d Date.parse(new Date());",
        "                    let dt \u003d new Date(timeStamp - timeq);",
        "                } else {",
        "                    let temp \u003d flag \u003d\u003d \u0027-\u0027 ? timeStamp - timeq : timeStamp + timeq;",
        "                    let dt \u003d new Date(temp);",
        "                }",
        "                let yyyy \u003d dt.getFullYear()",
        "                let MM \u003d add0(dt.getMonth() + 1);",
        "                let dd \u003d add0(dt.getDate());",
        "                let hh \u003d add0(dt.getHours());",
        "                let mm \u003d add0(dt.getMinutes());",
        "                let ss \u003d add0(dt.getSeconds());",
        "                let dateTime \u003d yyyy + \u0027-\u0027 + MM + \u0027-\u0027 + dd + \u0027 \u0027",
        "                    + hh + \u0027:\u0027 + mm + \u0027:\u0027 + ss;",
        "                return dateTime;",
        "            }",
        "",
        "            vm.showDiv \u003d {",
        "                gaikuang: {",
        "                    isShow: true,",
        "                    show: function () {",
        "                        vm.showDiv.clearDiv();",
        "                        vm.showDiv.gaikuang.isShow \u003d true;",
        "",
        "                        if (\u0027\u0027 \u003d\u003d vm.isDept_id) return;",
        "                        // vm.weigui_index_two_method();",
        "                        vm.gaikuangAnquan_method();",
        "                        vm.gaikuangXinxi_method();",
        "                        vm.gaikuangOne_method();",
        "                        // vm.gaikuangTwo_method();",
        "                        vm.gaikuangNenghao_method();",
        "                        vm.obtainTimeMethod();",
        "",
        "                    },",
        "                    batteryErayWarningStatisics: {",
        "                        isShow: false,",
        "                        show: function () {",
        "                            vm.showDiv.closeDetail();",
        "                            vm.showDiv.gaikuang.batteryErayWarningStatisics.isShow \u003d true;",
        "                        }",
        "                    }",
        "                },",
        "                dianchi: {",
        "                    isShow: false,",
        "                    show: function () {",
        "                        vm.showDiv.clearDiv();",
        "                        vm.showDiv.dianchi.isShow \u003d true;",
        "                        vm.weigui_index_two_method();",
        "                    }",
        "                },",
        "                guzhang: {",
        "                    isShow: false,",
        "                    show: function () {",
        "                        vm.showDiv.clearDiv();",
        "                        aLevel();",
        "",
        "                        vm.showDiv.guzhang.isShow \u003d true;",
        "                        if (\u0027\u0027 \u003d\u003d vm.isDept_id) return;",
        "                        vm.weigui_index_two_method();",
        "                        vm.vehicle_Failure();",
        "                        vm.guzhang_index_two_method();",
        "                        vm.guzhang_index_oneData();",
        "                        vm.guzhang_Statistics();",
        "                        vm.to_be_repaired_fault_method();",
        "                        vm.fourMethod();",
        "                        vm.method();",
        "                    }",
        "                },",
        "                weigui: {",
        "                    isShow: false,",
        "                    show: function () {",
        "                        vm.showDiv.clearDiv();",
        "                        vm.showDiv.weigui.isShow \u003d true;",
        "",
        "                        if (\u0027\u0027 \u003d\u003d vm.isDept_id) return;",
        "                        vm.gaodeMethod();",
        "                        vm.vehicle_violation_method();",
        "                        // vm.weigui_index_two_method();",
        "                        vm.irregularities_method();",
        "                        vm.driver_unsafe_method();",
        "                        vm.obtainTimeMethod();",
        "                    }",
        "",
        "                },",
        "                nenghao: {",
        "                    isShow: false,",
        "                    show: function () {",
        "                        vm.showDiv.clearDiv();",
        "                        vm.showDiv.nenghao.isShow \u003d true;",
        "",
        "                        if (\u0027\u0027 \u003d\u003d vm.isDept_id) return;",
        "                        vm.ele_method();",
        "                        vm.nenghao_data();",
        "                        vm.gas_nenghao_method();",
        "                        vm.miles_method();",
        "                        vm.energy_consumption_ele_method();",
        "                        vm.xianlu_licheng_method();",
        "                        vm.energy_consumption_method();",
        "                    }",
        "                },",
        "                clearDiv: function () {",
        "                    vm.showDiv.gaikuang.isShow \u003d false;",
        "                    vm.showDiv.dianchi.isShow \u003d false;",
        "                    vm.showDiv.guzhang.isShow \u003d false;",
        "                    vm.showDiv.weigui.isShow \u003d false;",
        "                    vm.showDiv.nenghao.isShow \u003d false;",
        "                },",
        "                closeDetail: function () {",
        "                    vm.showDiv.gaikuang.batteryErayWarningStatisics.isShow \u003d false;",
        "                }",
        "            };",
        "",
        "            /*",
        "            * 报警等级显示",
        "            * */"
      ]
    },
    {
      "b": [
        "            // function aLevel() {",
        "            //     api.queryGetAlarmLevel().then(function (data) {",
        "            //         alarmLevel \u003d data.info;",
        "            //         debugger;",
        "            //         if (alarmLevel \u003d\u003d 2) {",
        "            //             vm.alarmShow \u003d true;",
        "            //         } else if (alarmLevel \u003d\u003d 3) {",
        "            //             vm.alarmShow \u003d true;",
        "            //             vm.seriousShow \u003d true;",
        "            //         } else {",
        "            //             vm.alarmShow \u003d false;",
        "            //             vm.seriousShow \u003d false;",
        "            //         }",
        "            //     });",
        "            // }",
        "",
        "",
        "            /*",
        "            * 报警等级显示",
        "            * */",
        "            // aLevel();",
        ""
      ]
    },
    {
      "ab": [
        "            function aLevel() {",
        "                api.queryGetAlarmLevel().then(function (data) {"
      ]
    },
    {
      "a": [
        "                    alarmLevel \u003d data.info;",
        "                    if (alarmLevel \u003d\u003d 2) {",
        "                        vm.alarmShow \u003d true;",
        "                    } else if (alarmLevel \u003d\u003d 3) {",
        "                        vm.alarmShow \u003d true;",
        "                        vm.seriousShow \u003d true;",
        "                    } else {",
        "                        vm.alarmShow \u003d false;",
        "                        vm.seriousShow \u003d false;"
      ],
      "b": [
        "                   let  alarmLevel \u003d data.info;",
        "                    vm.alarmLevelShow \u003d [",
        "                        {name: \u0027alarmOne\u0027, show: false}, //一般报警",
        "                        {name: \u0027alarmTwo\u0027, show: false}, // 严重报警",
        "                        {name: \u0027alarmThree\u0027, show: false}, // 报警故障",
        "                    ];",
        "                    if (alarmLevel \u003d\u003d 0) return;",
        "                    for (let i \u003d 0; i \u003c alarmLevel; i++) {",
        "                        vm.alarmLevelShow[i].show \u003d true;"
      ],
      "edit_a": [
        [
          64,
          4
        ],
        [
          10,
          8
        ],
        [
          25,
          20
        ],
        [
          21,
          29
        ],
        [
          25,
          23
        ],
        [
          20,
          23
        ],
        [
          22,
          9
        ],
        [
          17,
          28
        ],
        [
          28,
          8
        ],
        [
          6,
          4
        ]
      ],
      "edit_b": [
        [
          19,
          4
        ],
        [
          45,
          3
        ],
        [
          10,
          8
        ],
        [
          25,
          39
        ],
        [
          21,
          44
        ],
        [
          25,
          43
        ],
        [
          20,
          1
        ],
        [
          22,
          32
        ],
        [
          17,
          38
        ],
        [
          28,
          19
        ],
        [
          6,
          3
        ]
      ]
    },
    {
      "ab": [
        "                    }",
        "                });",
        "            }",
        "",
        "            /**",
        "             API: api/statistic/getChartoOrTrendTime （接口地址）",
        "             *@name: 首页--时间获取 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.obtainData \u003d [];",
        "            vm.obtainTimeMethod \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getChartoOrTrendTime\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        timeType: vm.isTimeType // 时间类型",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.obtainData \u003d data[\u0027data\u0027];",
        "                        let _startDate \u003d data[\u0027data\u0027][0];",
        "                        let _endDate \u003d data[\u0027data\u0027][1];",
        "                        if (vm.showDiv.gaikuang.isShow \u0026\u0026 \u0027\u0027 !\u003d vm.isLineName) {",
        "                            vm.gaikuangTwo_method(_startDate, _endDate);",
        "                        }",
        "                        if (vm.showDiv.weigui.isShow \u0026\u0026 \u0027\u0027 !\u003d vm.isLineName) {",
        "                            vm.weigui_index_two_method(_startDate, _endDate);",
        "                        }",
        "                        ",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "            vm.obtainTimeMethod();",
        "",
        "            /**",
        "             API: api/statistic/getEnergyCount （接口地址）",
        "             *@name: 首页--概况能耗 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.gaikuangNenghao_data \u003d [];",
        "            vm.gaikuangNenghao_method \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getEnergyCount\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        deptid: vm.isDept_id,// 查询id",
        "                        timeType: vm.isTimeType // 时间类型",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.gaikuangNenghao_data \u003d data[\u0027data\u0027];",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/getCarBasicInfo （接口地址）",
        "             *@name: 首页--概况信息 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.gaikuangXinxi_data \u003d [];",
        "            vm.gaikuangXinxi_method \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getCarBasicInfo\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        // timeType: vm.isTimeType",
        "                        deptid: vm.isDept_id // 查询id",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.gaikuangXinxi_data \u003d data[\u0027data\u0027];",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/getHomeInfo （接口地址）",
        "             *@name: 首页--概况安全信息 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            // vm.gaikuangAnquan_data \u003d [];",
        "            vm.gaikuangAnquan_method \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getHomeInfo\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        deptid: vm.isDept_id, // 查询id",
        "                        timeType: vm.isTimeType // 时间类型",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    async: false,",
        "                    success: function (data) {",
        "                        vm.gaikuangAnquan_data \u003d data.data;",
        "                        vm.gaikuangBefore_data \u003d data[\u0027beforedata\u0027];",
        "                        vm.gKVehicleBFB \u003d util.percentage(vm.gaikuangAnquan_data[\u0027breakCar\u0027], vm.gaikuangBefore_data[\u0027breakCar\u0027], \u0027\u0027);",
        "                        vm.gKpeople \u003d util.percentage(vm.gaikuangAnquan_data[\u0027violationCar\u0027], vm.gaikuangBefore_data[\u0027violationCar\u0027], \u0027\u0027);",
        "                        vm.gKFaultNumBFB \u003d util.percentage(vm.gaikuangAnquan_data[\u0027breakTimes\u0027], vm.gaikuangBefore_data[\u0027breakTimes\u0027], \u0027%\u0027);",
        "                        $scope.$apply();",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/getAlarmWithTypeChart （接口地址）",
        "             *@name: 首页--概况 比例图 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.gaikuang_data \u003d [];",
        "            vm.gaikuangOne_method \u003d function () {",
        "                vm.bigFaultShow \u003d false;",
        "                vm.faultText \u003d \u0027故障分类比例\u0027;",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getAlarmWithTypeChart\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        timeType: vm.isTimeType, //时间类型",
        "                        deptid: vm.isDept_id, // 线路id",
        "                        depttype: \u0027lineDeptid\u0027 // 查询类型",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.fauleClassifi \u003d data.data;",
        "                        var faultList \u003d [];",
        "                        if (vm.fauleClassifi.length !\u003d 0) {",
        "                            for (var i \u003d 0; i \u003c vm.fauleClassifi.length; i++) {",
        "                                faultList.push({",
        "                                    value: vm.fauleClassifi[i].cnt,",
        "                                    name: vm.fauleClassifi[i].alarmType",
        "                                });",
        "                            }",
        "                        } else {",
        "                            faultList \u003d [];",
        "                        }",
        "                        vm.gaikuang_echarts_one \u003d echarts.init(document.getElementById(\"gaikuang_echarts_one\"));",
        "                        var option \u003d {",
        "                            tooltip: {",
        "                                trigger: \u0027item\u0027,",
        "                                formatter: \"{a} \u003cbr/\u003e{b} : {c} ({d}%)\"",
        "                            },",
        "                            noDataLoadingOption: {",
        "                                text: \u0027暂无数据\u0027,",
        "                                effect: \u0027bubble\u0027,",
        "                                effectOption: {",
        "                                    effect: {",
        "                                        n: 0 //气泡个数为0",
        "                                    }",
        "                                }",
        "                            },",
        "                            series: [",
        "                                {",
        "                                    name: \u0027故障\u0027,",
        "                                    type: \u0027pie\u0027,",
        "                                    radius: \u002770%\u0027,",
        "                                    center: [\u002750%\u0027, \u002760%\u0027],",
        "                                    data: faultList,",
        "                                    itemStyle: {",
        "                                        emphasis: {",
        "                                            shadowBlur: 10,",
        "                                            shadowOffsetX: 0,",
        "                                            shadowColor: \u0027rgba(0, 0, 0, 0.5)\u0027",
        "                                        }",
        "                                    }",
        "                                }",
        "                            ]",
        "                        };",
        "                        vm.gaikuang_echarts_one.setOption(option);",
        "                        vm.gaikuang_echarts_one.on(\u0027click\u0027, function (item) {",
        "                            faultOnClick(item.data.name);",
        "                            vm.text \u003d item.data.name;",
        "                        });",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                })",
        "            };",
        "            vm.falultReturn \u003d function () {",
        "                vm.gaikuangOne_method();",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/alarmChartMake （接口地址）",
        "             *@name: 首页--故障大分类比例图 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *parameter3: depttype,description:查询类型，",
        "             *parameter4: dataType,description:时间类型",
        "             *parameter5: systemType,description:故障分类",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            function faultOnClick(item) {",
        "",
        "                let params \u003d {",
        "                    timeType: vm.isTimeType,",
        "                    deptid: vm.isDept_id,",
        "                    depttype: \u0027lineDeptId\u0027,",
        "                    dataType: 1,",
        "                    systemType: item",
        "                };",
        "",
        "                $http({",
        "                    method: \u0027POST\u0027,",
        "                    url: \u0027/api/statistic/alarmChartMake\u0027,",
        "                    params: params",
        "                }).then(function (response) {",
        "                    let data \u003d [];",
        "                    vm.bigFaultShow \u003d true;",
        "                    vm.faultText \u003d item + \u0027比例\u0027;",
        "                    let _dataArr \u003d response.data.data;",
        "                    for (let i \u003d 0; i \u003c _dataArr.length; i++) {",
        "                        data.push({",
        "                            name: _dataArr[i].alarmType,",
        "                            value: _dataArr[i].cnt",
        "                        });",
        "                    }",
        "                    vm.gaikuang_echarts_one \u003d echarts.init(document.getElementById(\"gaikuang_echarts_one\"));",
        "                    let option \u003d {",
        "                        tooltip: {",
        "                            trigger: \u0027item\u0027,",
        "                            formatter: \"{a} \u003cbr/\u003e{b} : {c} ({d}%)\"",
        "                        },",
        "                        noDataLoadingOption: {",
        "                            text: \u0027暂无数据\u0027,",
        "                            effect: \u0027bubble\u0027,",
        "                            effectOption: {",
        "                                effect: {",
        "                                    n: 0 //气泡个数为0",
        "                                }",
        "                            }",
        "                        },",
        "                        series: [",
        "                            {",
        "                                name: \u0027故障\u0027,",
        "                                type: \u0027pie\u0027,",
        "                                radius: \u002770%\u0027,",
        "                                center: [\u002750%\u0027, \u002760%\u0027],",
        "                                data: data,",
        "                                itemStyle: {",
        "                                    emphasis: {",
        "                                        shadowBlur: 10,",
        "                                        shadowOffsetX: 0,",
        "                                        shadowColor: \u0027rgba(0, 0, 0, 0.5)\u0027",
        "                                    }",
        "                                }",
        "                            }",
        "                        ]",
        "                    };",
        "                    vm.gaikuang_echarts_one.setOption(option);",
        "                    vm.gaikuang_echarts_one.on(\u0027click\u0027, function (item) {",
        "                        // 系统名称   item.data.name;",
        "                        buttonClick(item.data.name);",
        "                    });",
        "",
        "                });",
        "            }",
        "            // 模拟点击事件",
        "            function buttonClick(sysName) {",
        "                $(\u0027#jumpSummary\u0027).click();",
        "                $timeout(function () {",
        "                    $rootScope.$broadcast(\u0027main-Of-Summary\u0027, {name: sysName, date: vm.isTimeType, bigSys: vm.text, deptId: vm.isDept_id}); // 首页Echarts跳转至报警汇总  data： 系统名称",
        "                },300);",
        "            }",
        "",
        "            function getEchartsFault (faultName) {",
        "                $(\u0027#myModalT\u0027).modal(\u0027show\u0027);",
        "                vm.tableParams2 \u003d new ngTableParams({",
        "                    \"page\": page, // show first page",
        "                    \"count\": count, // count per page",
        "                }, {",
        "                    total: 0,",
        "                    getData: function ($defer, params) {",
        "                        params[\u0027tablePageDisabled\u0027] \u003d true;",
        "                        let queryParams;",
        "                            queryParams \u003d {",
        "                                \"findKeyEqual1\": \u0027lineName\u0027, // 查询类型",
        "                                \"findValEqual1\": vm.isLineName, // 类型值",
        "                                \"page\": params.page(), // 页码",
        "                                \"count\": params.count(), // 行数",
        "                                \"sortKey\": \"alarmstarttime\", // 排序字段",
        "                                \"sortVal\": \"desc\", // 降序",
        "                                \"timeType\": vm.isTimeType, // 时间类型",
        "                                \"findKey\": \u0027alarmType\u0027, // 报警类型",
        "                                \"findVal\": faultName, // 报警类型",
        "                            };",
        "                        let callback \u003d function (ret) {",
        "                            $defer.resolve(ret.body);",
        "                            vm.dataBody2 \u003d ret.body;",
        "                            vm.head2 \u003d ret.head;",
        "                            params.length \u003d ret.body.length;",
        "                            params.total2 \u003d vm.flag;",
        "                            if (params.total2 \u003d\u003d 0 \u0026\u0026 queryParams.page \u003d\u003d 1) {",
        "                                params.TF \u003d false;",
        "                            } else {",
        "                                params.TF \u003d true;",
        "                            }",
        "                            params.tablePageDisabled \u003d false;",
        "                            vm.echartsFualtTable \u003d true;",
        "                            vm.showDetail \u003d true;",
        "                        };",
        "                        callAPI2(\u0027statistic/getAlarmSummary\u0027, queryParams, 5, callback);",
        "                    }",
        "                });",
        "            }",
        "            // 跳转",
        "            vm.jump \u003d function (url) {",
        "                Nav.setNavActive(url);",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/getViolationTrendsForType （接口地址）",
        "             *@name: 首页--概况 违规比例图 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *parameter3: violationtype,description:违规类型，",
        "             *parameter4: type,description:图形类型",
        "             *parameter5: top,description:数据返回全部",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "",
        "            // let _startDate \u003d data[\u0027data\u0027][0];",
        "            // let _endDate \u003d data[\u0027data\u0027][1];",
        "            vm.gaikuangTwo_data \u003d [];",
        "            vm.gaikuangTwo_method \u003d function (start, end) {",
        "                $.ajax({",
        "                    // url: \u0027/api/statistic/getViolationTrendsForType\u0027,",
        "                    // type: \u0027get\u0027,",
        "                    // data: {",
        "                    //     deptid: vm.isDept_id, // 查询id",
        "                    //     timeType: vm.isTimeType, // 时间类型",
        "                    //     violationtype: 3, // 查询类型",
        "                    //     type: \u0027scaleMap\u0027, // 图形类型",
        "                    //     top: -1 // 数据返回",
        "                    // },",
        "                    url: \u0027/api/statistic/driverAllActionFrequency2\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        endDate: end,",
        "                        findKey: \u0027lineName\u0027,",
        "                        findVal: vm.isLineName,",
        "                        startDate: start,",
        "                        type: \u0027sum\u0027,",
        "                        violationType: -1",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.arrdata \u003d data[\u0027data\u0027];",
        "                        let arr \u003d [];",
        "                        if (null !\u003d vm.arrdata \u0026\u0026 undefined !\u003d vm.arrdata \u0026\u0026 \u0027\u0027 !\u003d vm.arrdata) {",
        "                            for (let tt in vm.arrdata) {",
        "                                arr.push({",
        "                                    value: vm.arrdata[tt],",
        "                                    name: $scope.languageDict[tt][$scope.language]",
        "                                });",
        "                            }",
        "                            var chartisarr \u003d arr;",
        "                            if (arr.length \u003e 16) {",
        "                                let a \u003d arr.slice(0, 16);",
        "                                let b \u003d arr.slice(16, arr.length + 1);",
        "                                let aNumber \u003d 0;",
        "                                for (let j \u003d 0; j \u003c b.length; j++) {",
        "                                    aNumber \u003d aNumber + parseInt(b[j].value);",
        "                                }",
        "                                chartisarr \u003d a;",
        "                                chartisarr.push({value: aNumber, name: \u0027其他\u0027})",
        "                            }",
        "",
        "                        } else {",
        "                            chartisarr \u003d [];",
        "                        }",
        "",
        "                        vm.gaikuang_echarts_two \u003d echarts.init(document.getElementById(\"gaikuang_echarts_two\"));",
        "                        var option \u003d {",
        "                            tooltip: {",
        "                                trigger: \u0027item\u0027,",
        "                                position: function (p) {",
        "                                    var id \u003d document.getElementById(\u0027gaikuang_echarts_two\u0027);",
        "                                    // if ($(id).width() - p[0]- $(id).find(\"div .echarts-tooltip\").width()-20 \u003c0) {",
        "                                    //     p[0] \u003d p[0] - $(id).find(\"div .echarts-tooltip\").width() -40;",
        "                                    // }",
        "                                    // return [$(id).width()/2, $(id).height()/2];",
        "                                    return [p[0], p[1]]",
        "                                },",
        "                                formatter: \"{b} :\u003cbr/\u003e {c} \u003cbr/\u003e ({d}%)\"",
        "                            },",
        "                            noDataLoadingOption: {",
        "                                text: \u0027暂无数据\u0027,",
        "                                effect: \u0027bubble\u0027,",
        "                                effectOption: {",
        "                                    effect: {",
        "                                        n: 0 //气泡个数为0",
        "                                    }",
        "                                }",
        "                            },",
        "                            series: [",
        "                                {",
        "                                    name: \u0027访问来源\u0027,",
        "                                    type: \u0027pie\u0027,",
        "                                    radius: \u002770%\u0027,",
        "                                    center: [\u002750%\u0027, \u002760%\u0027],",
        "                                    data: chartisarr,",
        "                                    itemStyle: {",
        "                                        emphasis: {",
        "                                            shadowBlur: 10,",
        "                                            shadowOffsetX: 0,",
        "                                            shadowColor: \u0027rgba(0, 0, 0, 0.5)\u0027",
        "                                        }",
        "                                    }",
        "                                }",
        "                            ]",
        "                        };",
        "                        vm.gaikuang_echarts_two.setOption(option);",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "            // vm.gaikuangTwo_method \u003d function () {",
        "            //     $.ajax({",
        "            //         // url: \u0027/api/statistic/getViolationTrendsForType\u0027,",
        "            //         // type: \u0027get\u0027,",
        "            //         // data: {",
        "            //         //     deptid: vm.isDept_id, // 查询id",
        "            //         //     timeType: vm.isTimeType, // 时间类型",
        "            //         //     violationtype: 3, // 查询类型",
        "            //         //     type: \u0027scaleMap\u0027, // 图形类型",
        "            //         //     top: -1 // 数据返回",
        "            //         // },",
        "            //         url: \u0027/api/statistic/driverAllActionFrequency2\u0027,",
        "            //         type: \u0027get\u0027,",
        "            //         data: {",
        "            //             findKey: \u0027lineName\u0027, // 查询id",
        "            //             timeType: vm.isTimeType, // 时间类型",
        "            //             violationtype: -1, // 查询类型",
        "            //             findVal: vm.isLineName, // 图形类型",
        "            //             type: \u0027sum\u0027",
        "            //         },",
        "            //         dataType: \u0027json\u0027,",
        "            //         success: function (data) {",
        "            //             vm.arrdata \u003d data[\u0027data\u0027];",
        "            //             alert(1);",
        "            //             console.log(vm.arrdata);",
        "            //             let arr \u003d [];",
        "            //             if (null !\u003d vm.arrdata \u0026\u0026 undefined !\u003d vm.arrdata \u0026\u0026 \u0027\u0027 !\u003d vm.arrdata) {",
        "            //                 for (let tt in vm.arrdata) {",
        "            //                     arr.push({",
        "            //                         value: vm.arrdata[tt],",
        "            //                         name: tt",
        "            //                     });",
        "            //                 }",
        "            //                 var chartisarr \u003d arr;",
        "            //                 if (arr.length \u003e 16) {",
        "            //                     let a \u003d arr.slice(0, 16);",
        "            //                     let b \u003d arr.slice(16, arr.length + 1);",
        "            //                     let aNumber \u003d 0;",
        "            //                     for (let j \u003d 0; j \u003c b.length; j++) {",
        "            //                         aNumber \u003d aNumber + parseInt(b[j].value);",
        "            //                     }",
        "            //                     chartisarr \u003d a;",
        "            //                     chartisarr.push({value: aNumber, name: \u0027其他\u0027})",
        "            //                 }",
        "            //",
        "            //             } else {",
        "            //                 chartisarr \u003d [];",
        "            //             }",
        "            //",
        "            //             vm.gaikuang_echarts_two \u003d echarts.init(document.getElementById(\"gaikuang_echarts_two\"));",
        "            //             var option \u003d {",
        "            //                 tooltip: {",
        "            //                     trigger: \u0027item\u0027,",
        "            //                     position: function (p) {",
        "            //                         var id \u003d document.getElementById(\u0027gaikuang_echarts_two\u0027);",
        "            //                         // if ($(id).width() - p[0]- $(id).find(\"div .echarts-tooltip\").width()-20 \u003c0) {",
        "            //                         //     p[0] \u003d p[0] - $(id).find(\"div .echarts-tooltip\").width() -40;",
        "            //                         // }",
        "            //                         // return [$(id).width()/2, $(id).height()/2];",
        "            //                         return [p[0], p[1]]",
        "            //                     },",
        "            //                     formatter: \"{b} :\u003cbr/\u003e {c} \u003cbr/\u003e ({d}%)\"",
        "            //                 },",
        "            //                 noDataLoadingOption: {",
        "            //                     text: \u0027暂无数据\u0027,",
        "            //                     effect: \u0027bubble\u0027,",
        "            //                     effectOption: {",
        "            //                         effect: {",
        "            //                             n: 0 //气泡个数为0",
        "            //                         }",
        "            //                     }",
        "            //                 },",
        "            //                 series: [",
        "            //                     {",
        "            //                         name: \u0027访问来源\u0027,",
        "            //                         type: \u0027pie\u0027,",
        "            //                         radius: \u002770%\u0027,",
        "            //                         center: [\u002750%\u0027, \u002760%\u0027],",
        "            //                         data: chartisarr,",
        "            //                         itemStyle: {",
        "            //                             emphasis: {",
        "            //                                 shadowBlur: 10,",
        "            //                                 shadowOffsetX: 0,",
        "            //                                 shadowColor: \u0027rgba(0, 0, 0, 0.5)\u0027",
        "            //                             }",
        "            //                         }",
        "            //                     }",
        "            //                 ]",
        "            //             };",
        "            //             vm.gaikuang_echarts_two.setOption(option);",
        "            //         },",
        "            //         error: function (err) {",
        "            //         }",
        "            //     });",
        "            // };",
        "",
        "            /**",
        "             API: api/statistic/getOilRank （接口地址）",
        "             *@name: 首页--能耗数据 油耗排名 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *parameter3: count,description:行数，",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.nenghao_data \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getOilRank\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        deptid: vm.isDept_id, // 线路id",
        "                        timeType: vm.isTimeType, // 时间类型",
        "                        count: 5 // 行数",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.oil_nenghao \u003d data.data.body.data;",
        "                        vm.oil_nenghao_head \u003d data.data.head;",
        "                        if (vm.oil_nenghao.length \u003d\u003d\u003d 0) {",
        "                            vm.isShow5 \u003d true;",
        "                        } else {",
        "                            vm.isShow5 \u003d false;",
        "                        }",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/getEleRank （接口地址）",
        "             *@name: 首页--能耗数据 电耗排名 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *parameter3: count,description:行数，",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.ele_method \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getEleRank\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        deptid: vm.isDept_id, // 线路id",
        "                        timeType: vm.isTimeType, // 时间类型",
        "                        count: 5 // 行数",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "",
        "                        vm.ele_nenghao \u003d data.data.body.data;",
        "                        vm.ele_nenghao_head \u003d data.data.head;",
        "",
        "                        if (vm.ele_nenghao.length \u003d\u003d\u003d 0) {",
        "                            vm.isShow4 \u003d true;",
        "                        } else {",
        "                            vm.isShow4 \u003d false;",
        "                        }",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/getMilesRank （接口地址）",
        "             *@name: 首页--能耗数据 里程排名 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *parameter3: count,description:行数，",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.miles_method \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getMilesRank\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        deptid: vm.isDept_id, // 线路id",
        "                        timeType: vm.isTimeType, // 时间类型",
        "                        count: 5 // 行数",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.miles_nenghao \u003d data.data.body.data;",
        "                        vm.miles_nenghao_head \u003d data.data.head;",
        "                        if (vm.miles_nenghao.length \u003d\u003d\u003d 0) {",
        "                            vm.isShow7 \u003d true;",
        "                        } else {",
        "                            vm.isShow7 \u003d false;",
        "                        }",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/getGasRank （接口地址）",
        "             *@name: 首页--能耗数据 气耗排名 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *parameter3: count,description:行数，",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.gas_nenghao_method \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getGasRank\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        deptid: vm.isDept_id,    // 线路id",
        "                        timeType: vm.isTimeType, // 时间类型",
        "                        count: 5 // 行数",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.gas_nenghao \u003d data.data.body.data;",
        "                        vm.gas_nenghao_head \u003d data.data.head;",
        "                        if (vm.gas_nenghao.length \u003d\u003d\u003d 0) {",
        "                            vm.isShow6 \u003d true;",
        "                        } else {",
        "                            vm.isShow6 \u003d false;",
        "                        }",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/getHundredEnergy （接口地址）",
        "             *@name: 首页--能耗趋势图获取数据 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *parameter3: depttype,description:查询类型，",
        "             *parameter4: count,description:行数，",
        "             *parameter5: motorType,description:数据类型，",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.energy_consumption_total_data \u003d [];",
        "            vm.energy_consumption_ele_method \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getHundredEnergy\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        deptid: vm.isDept_id, // 线路id",
        "                        timeType: vm.isTimeType, //时间类型",
        "                        depttype: \u0027lineDeptid\u0027,",
        "                        motorType: 10 // 数据类型",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.energy_consumption_total_data \u003d data[\u0027data\u0027];",
        "                        /*油耗*/",
        "                        vm.oil_Data \u003d [];",
        "                        vm.xOil_data \u003d [];",
        "",
        "                        if (null !\u003d vm.energy_consumption_total_data \u0026\u0026 null !\u003d vm.energy_consumption_total_data[2].data \u0026\u0026 undefined !\u003d vm.energy_consumption_total_data[2].data \u0026\u0026 \u0027\u0027 !\u003d vm.energy_consumption_total_data[2].data) {",
        "                            vm.oil_Data \u003d vm.energy_consumption_total_data[2].data;",
        "                            vm.xOil_data \u003d vm.energy_consumption_total_data[2].time;",
        "                        } else {",
        "                            vm.oil_Data \u003d [0];",
        "                            vm.xOil_data \u003d [\u0027\u0027, \u0027\u0027, \u0027\u0027, \u0027\u0027, \u0027\u0027];",
        "                        }",
        "                        /*电耗*/",
        "                        vm.ele_Data \u003d [];",
        "                        vm.xele_Data \u003d [];",
        "                        if (null !\u003d vm.energy_consumption_total_data \u0026\u0026 null !\u003d vm.energy_consumption_total_data[0].data \u0026\u0026 undefined !\u003d vm.energy_consumption_total_data[0].data \u0026\u0026 \u0027\u0027 !\u003d vm.energy_consumption_total_data[0].data) {",
        "                            vm.ele_Data \u003d vm.energy_consumption_total_data[0].data;",
        "                            vm.xele_Data \u003d vm.energy_consumption_total_data[0].time;",
        "                        } else {",
        "                            vm.ele_Data \u003d [0];",
        "                            vm.xele_Data \u003d [\u0027\u0027, \u0027\u0027, \u0027\u0027, \u0027\u0027, \u0027\u0027];",
        "                        }",
        "",
        "                        /*气耗*/",
        "                        vm.gas_Data \u003d [];",
        "                        vm.x_gas_Data \u003d [];",
        "                        if (null !\u003d vm.energy_consumption_total_data \u0026\u0026 null !\u003d vm.energy_consumption_total_data[1].data \u0026\u0026 undefined !\u003d vm.energy_consumption_total_data[1].data \u0026\u0026 \u0027\u0027 !\u003d vm.energy_consumption_total_data[1].data) {",
        "                            vm.gas_Data \u003d vm.energy_consumption_total_data[1].data;",
        "                            vm.x_gas_Data \u003d vm.energy_consumption_total_data[1].time;",
        "                        } else {",
        "                            vm.gas_Data \u003d [0];",
        "                            vm.x_gas_Data \u003d [\u0027\u0027, \u0027\u0027, \u0027\u0027, \u0027\u0027, \u0027\u0027];",
        "                        }",
        "                        /*------------------------------------------------百公里电耗--------------------------------------------------------------*/",
        "                        vm.nenghao_index_one \u003d echarts.init(document.getElementById(\"nenghao_index_one\"));",
        "                        var option \u003d {",
        "                            tooltip: {",
        "                                trigger: \u0027axis\u0027,",
        "                            },",
        "                            noDataLoadingOption: {",
        "                                text: \u0027暂无数据\u0027,",
        "                                effect: \u0027bubble\u0027,",
        "                                effectOption: {",
        "                                    effect: {",
        "                                        n: 0 //气泡个数为0",
        "                                    }",
        "                                }",
        "                            },",
        "                            xAxis: {",
        "                                type: \u0027category\u0027,",
        "                                boundaryGap: false,",
        "                                data: vm.xele_Data,",
        "                                name: \u0027日期\u0027",
        "                            },",
        "                            yAxis: {",
        "                                type: \u0027value\u0027,",
        "                                name: \u0027能耗KWH\u0027",
        "                            },",
        "                            series: [{",
        "                                name: \u0027电耗\u0027,",
        "                                data: vm.ele_Data,",
        "                                type: \u0027line\u0027,",
        "                                smooth: true,",
        "                                areaStyle: {}",
        "                            }]",
        "                        };",
        "                        vm.nenghao_index_one.setOption(option);",
        "                        /*------------------------------------------百公里油耗------------------------------------------------*/",
        "                        vm.nenghao_index_two \u003d echarts.init(document.getElementById(\"nenghao_index_two\"));",
        "                        var option \u003d {",
        "                            tooltip: {",
        "                                trigger: \u0027axis\u0027,",
        "                            },",
        "                            noDataLoadingOption: {",
        "                                text: \u0027暂无数据\u0027,",
        "                                effect: \u0027bubble\u0027,",
        "                                effectOption: {",
        "                                    effect: {",
        "                                        n: 0 //气泡个数为0",
        "                                    }",
        "                                }",
        "                            },",
        "                            xAxis: {",
        "                                type: \u0027category\u0027,",
        "                                boundaryGap: false,",
        "                                data: vm.xOil_data,",
        "                                name: \u0027日期\u0027",
        "                            },",
        "                            yAxis: {",
        "                                type: \u0027value\u0027,",
        "                                name: \u0027能耗L\u0027",
        "                            },",
        "                            series: [{",
        "                                name: \u0027油耗\u0027,",
        "                                data: vm.oil_Data,",
        "                                type: \u0027line\u0027,",
        "                                smooth: true,",
        "                                areaStyle: {}",
        "                            }]",
        "                        };",
        "                        vm.nenghao_index_two.setOption(option);",
        "                        /*---------------------------------------百公里气耗-----------------------------------------------*/",
        "                        vm.nenghao_index_three \u003d echarts.init(document.getElementById(\"nenghao_index_three\"));",
        "                        var option \u003d {",
        "                            tooltip: {",
        "                                trigger: \u0027axis\u0027,",
        "                            },",
        "                            noDataLoadingOption: {",
        "                                text: \u0027暂无数据\u0027,",
        "                                effect: \u0027bubble\u0027,",
        "                                effectOption: {",
        "                                    effect: {",
        "                                        n: 0 //气泡个数为0",
        "                                    }",
        "                                }",
        "                            },",
        "                            xAxis: {",
        "                                type: \u0027category\u0027,",
        "                                boundaryGap: false,",
        "                                data: vm.x_gas_Data,",
        "                                name: \u0027日期\u0027",
        "                            },",
        "                            yAxis: {",
        "                                type: \u0027value\u0027,",
        "                                name: \u0027能耗L\u0027",
        "                            },",
        "                            series: [{",
        "                                name: \u0027气耗\u0027,",
        "                                data: vm.gas_Data,",
        "                                type: \u0027line\u0027,",
        "                                smooth: true,",
        "                                areaStyle: {}",
        "                            }]",
        "                        };",
        "                        vm.nenghao_index_three.setOption(option);",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/getCarAlarmTrends （接口地址）",
        "             *@name: 首页--车辆故障趋势图 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *parameter3: violationtype,description:违规类型，",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            guzhang_oneData \u003d [];",
        "            vm.guzhang_index_oneData \u003d function () {",
        "                $.ajax(",
        "                    {",
        "                        url: \"/api/statistic/getCarAlarmTrends\",",
        "                        type: \"get\",",
        "                        data: {",
        "                            deptid: vm.isDept_id, // 线路id",
        "                            timeType: vm.isTimeType, //时间类型",
        "                            violationtype: 3 // 违规类型",
        "                        },",
        "                        dataType: \"json\",",
        "                        async: true,",
        "                        success: function (data) {",
        "                            vm.guzhang_oneData \u003d data;",
        "                            var guzhangone \u003d [];",
        "                            var guzhanglenged \u003d [];",
        "                            var guzhangX \u003d [];",
        "                            if (null \u003d\u003d vm.guzhang_oneData.data || \u0027\u0027 \u003d\u003d vm.guzhang_oneData.data) {",
        "                                guzhangone \u003d [{",
        "                                    name: \u0027\u0027,",
        "                                    type: \u0027line\u0027,",
        "                                    smooth: true,  //曲线",
        "                                    data: \u0027\u0027",
        "                                }];",
        "                            } else {",
        "                                for (var i \u003d 0; i \u003c vm.guzhang_oneData.data.length; i++) {",
        "                                    guzhangone.push({",
        "                                        name: vm.guzhang_oneData.data[i].name,",
        "                                        type: \u0027line\u0027,",
        "                                        smooth: true,  //曲线",
        "                                        data: vm.guzhang_oneData.data[i].data",
        "                                    });",
        "                                    guzhanglenged.push(vm.guzhang_oneData.data[i].name)",
        "                                }",
        "                                guzhangX \u003d vm.guzhang_oneData.data[0].time",
        "",
        "                            }",
        "",
        "                            vm.guzhang_index_one \u003d echarts.init(document.getElementById(\"guzhang_index_one\"));",
        "                            var option \u003d {",
        "                                title: {",
        "                                    text: \u0027\u0027",
        "                                },",
        "                                tooltip: {",
        "                                    trigger: \u0027axis\u0027",
        "                                },",
        "                                legend: {",
        "                                    data: guzhanglenged",
        "                                },",
        "                                noDataLoadingOption: {",
        "                                    text: \u0027暂无数据\u0027,",
        "                                    effect: \u0027bubble\u0027,",
        "                                    effectOption: {",
        "                                        effect: {",
        "                                            n: 0 //气泡个数为0",
        "                                        }",
        "                                    }",
        "                                },",
        "                                grid: {",
        "                                    left: \u00273%\u0027,",
        "                                    right: \u00274%\u0027,",
        "                                    bottom: \u00273%\u0027,",
        "                                    containLabel: true",
        "                                },",
        "                                toolbox: {",
        "                                    feature: {",
        "                                        saveAsImage: {}",
        "                                    }",
        "                                },",
        "                                xAxis: {",
        "                                    type: \u0027category\u0027,",
        "                                    boundaryGap: false,",
        "                                    data: guzhangX,",
        "                                    name: \u0027日期\u0027",
        "                                },",
        "                                yAxis: {",
        "                                    type: \u0027value\u0027,",
        "                                    name: \u0027次数\u0027",
        "                                },",
        "                                series: guzhangone",
        "                            };",
        "                            vm.guzhang_index_one.setOption(option);",
        "                        },",
        "                        error: function (data) {",
        "                        }",
        "                    }",
        "                )",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/getAlarmChart （接口地址）",
        "             *@name: 首页--故障比例图 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.guZhangfalultReturn \u003d function () {",
        "                vm.method();",
        "            };",
        "            vm.guzhang_index_two_data \u003d [];",
        "            vm.guzhang_index_two_method \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getAlarmChart\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        timeType: vm.isTimeType, //时间类型",
        "                        deptid: vm.isDept_id, // 线路id",
        "                        limitcount: \u00275\u0027",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.guzhang_index_two_data \u003d data[\u0027data\u0027];",
        "                        var guzhangList \u003d [];",
        "                        if (null !\u003d vm.guzhang_index_two_data || undefined !\u003d vm.guzhang_index_two_data) {",
        "                            for (var i \u003d 0; i \u003c vm.guzhang_index_two_data.length; i++) {",
        "                                guzhangList.push({",
        "                                    value: vm.guzhang_index_two_data[i].cnt,",
        "                                    name: vm.guzhang_index_two_data[i].alarmType",
        "                                });",
        "                            }",
        "                        } else {",
        "                            vm.guzhang_num_data \u003d 0;",
        "                        }",
        "",
        "                        vm.guzhang_index_two \u003d echarts.init(document.getElementById(\"guzhang_index_three\"));",
        "                        var option \u003d {",
        "                            tooltip: {",
        "                                trigger: \u0027item\u0027,",
        "                                position: function (p) {",
        "                                    var id \u003d document.getElementById(\u0027guzhang_index_two\u0027);",
        "                                    // if ($(id).width() - p[0]- $(id).find(\"div .echarts-tooltip\").width()-20 \u003c0) {",
        "                                    //     p[0] \u003d p[0] - $(id).find(\"div .echarts-tooltip\").width() -40;",
        "                                    // }",
        "                                    // return [$(id).width()/2, $(id).height()/2];",
        "                                    return [p[0], p[1]]",
        "                                },",
        "                                formatter: \"{b} :\u003cbr/\u003e {c}({d}%)\"",
        "                            },",
        "                            noDataLoadingOption: {",
        "                                text: \u0027暂无数据\u0027,",
        "                                effect: \u0027bubble\u0027,",
        "                                effectOption: {",
        "                                    effect: {",
        "                                        n: 0 //气泡个数为0",
        "                                    }",
        "                                }",
        "                            },",
        "                            title: {",
        "                                x: \u0027center\u0027",
        "                            },",
        "                            series: [",
        "                                {",
        "                                    name: \u0027故障类型\u0027,",
        "                                    type: \u0027pie\u0027,",
        "                                    radius: \u002755%\u0027,",
        "                                    center: [\u002750%\u0027, \u002762%\u0027],",
        "                                    data: guzhangList,",
        "                                    itemStyle: {",
        "                                        emphasis: {",
        "                                            shadowBlur: 10,",
        "                                            shadowOffsetX: 0,",
        "                                            shadowColor: \u0027rgba(0, 0, 0, 0.5)\u0027",
        "                                        }",
        "                                    }",
        "                                }",
        "                            ]",
        "                        };",
        "                        vm.guzhang_index_two.setOption(option);",
        "                        vm.guzhang_index_two.on(\u0027click\u0027, function (item) {",
        "                            // 系统名称   item.data.name;",
        "                            vm.text \u003d \u0027\u0027;",
        "                            buttonClick(item.data.name);",
        "                        });",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "",
        "            function guZhangfaultOnClick(item) {",
        "",
        "                let params \u003d {",
        "                    timeType: vm.isTimeType,",
        "                    deptid: vm.isDept_id,",
        "                    depttype: \u0027lineDeptId\u0027,",
        "                    dataType: 1,",
        "                    systemType: item",
        "                };",
        "",
        "                $http({",
        "                    method: \u0027POST\u0027,",
        "                    url: \u0027/api/statistic/alarmChartMake\u0027,",
        "                    params: params",
        "                }).then(function (response) {",
        "                    let data \u003d [];",
        "                    vm.guZhangFaultShow \u003d true;",
        "                    vm.guZhangFaultText \u003d item + \u0027比例\u0027;",
        "                    let _dataArr \u003d response.data.data;",
        "                    for (let i \u003d 0; i \u003c _dataArr.length; i++) {",
        "                        data.push({",
        "                            name: _dataArr[i].alarmType,",
        "                            value: _dataArr[i].cnt",
        "                        });",
        "                    }",
        "                    vm.guzhang_index_three \u003d echarts.init(document.getElementById(\"guzhang_index_two\"));",
        "                    var option \u003d {",
        "                        tooltip: {",
        "                            trigger: \u0027item\u0027,",
        "                            formatter: \"{a} \u003cbr/\u003e{b} : {c} ({d}%)\"",
        "                        },",
        "                        noDataLoadingOption: {",
        "                            text: \u0027暂无数据\u0027,",
        "                            effect: \u0027bubble\u0027,",
        "                            effectOption: {",
        "                                effect: {",
        "                                    n: 0 //气泡个数为0",
        "                                }",
        "                            }",
        "                        },",
        "                        series: [",
        "                            {",
        "                                name: \u0027故障\u0027,",
        "                                type: \u0027pie\u0027,",
        "                                radius: \u002755%\u0027,",
        "                                center: [\u002750%\u0027, \u002760%\u0027],",
        "                                data: data,",
        "                                itemStyle: {",
        "                                    emphasis: {",
        "                                        shadowBlur: 10,",
        "                                        shadowOffsetX: 0,",
        "                                        shadowColor: \u0027rgba(0, 0, 0, 0.5)\u0027",
        "                                    }",
        "                                }",
        "                            }",
        "                        ]",
        "                    };",
        "                    vm.guzhang_index_three.setOption(option);",
        "                    vm.guzhang_index_three.on(\u0027click\u0027, function (item) {",
        "                        // 系统名称   item.data.name;",
        "                        buttonClick(item.data.name);",
        "                    });",
        "",
        "                });",
        "",
        "",
        "            }",
        "",
        "            /**",
        "             API: api/statistic/getAlarmWithTypeChart （接口地址）",
        "             *@name: 首页--故障整体趋势图 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *parameter3: depttype,description:查询类型",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.method \u003d function () {",
        "                vm.guZhangFaultShow \u003d false;",
        "                vm.guZhangFaultText \u003d \u0027故障分类比例\u0027;",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getAlarmWithTypeChart\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        timeType: vm.isTimeType, //时间类型",
        "                        deptid: vm.isDept_id, // 线路id",
        "                        depttype: \u0027lineDeptid\u0027 // 查询类型",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.fauleClassifi \u003d data.data;",
        "                        var faultList \u003d [];",
        "                        for (var i \u003d 0; i \u003c vm.fauleClassifi.length; i++) {",
        "                            faultList.push({",
        "                                value: vm.fauleClassifi[i].cnt,",
        "                                name: vm.fauleClassifi[i].alarmType",
        "                            });",
        "                        }",
        "                        vm.guzhang_index_three \u003d echarts.init(document.getElementById(\"guzhang_index_two\"));",
        "                        var option \u003d {",
        "                            tooltip: {",
        "                                trigger: \u0027item\u0027,",
        "                                formatter: \"{a} \u003cbr/\u003e{b} : {c} ({d}%)\"",
        "                            },",
        "                            noDataLoadingOption: {",
        "                                text: \u0027暂无数据\u0027,",
        "                                effect: \u0027bubble\u0027,",
        "                                effectOption: {",
        "                                    effect: {",
        "                                        n: 0 //气泡个数为0",
        "                                    }",
        "                                }",
        "                            },",
        "                            series: [",
        "                                {",
        "                                    name: \u0027故障\u0027,",
        "                                    type: \u0027pie\u0027,",
        "                                    radius: \u002755%\u0027,",
        "                                    center: [\u002750%\u0027, \u002760%\u0027],",
        "                                    data: faultList,",
        "                                    itemStyle: {",
        "                                        emphasis: {",
        "                                            shadowBlur: 10,",
        "                                            shadowOffsetX: 0,",
        "                                            shadowColor: \u0027rgba(0, 0, 0, 0.5)\u0027",
        "                                        }",
        "                                    }",
        "                                }",
        "                            ]",
        "                        };",
        "                        vm.guzhang_index_three.setOption(option);",
        "                        vm.guzhang_index_three.on(\u0027click\u0027, function (item) {",
        "                            // 系统名称   item.data.name;",
        "                            guZhangfaultOnClick(item.data.name);",
        "                            vm.text \u003d item.data.name;",
        "                        });",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                })",
        "            };",
        "",
        "            vm.guZhangfalultReturn \u003d function () {",
        "                vm.method();",
        "            };",
        "            /**",
        "             API: api/statistic/getAlarmNoTypeTrend （接口地址）",
        "             *@name: 首页--故障大分类 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *parameter3: depttype,description:查询类型",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.fourMethod \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getAlarmNoTypeTrend\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        timeType: vm.isTimeType, //时间类型",
        "                        deptid: vm.isDept_id, // 线路id",
        "                        depttype: \u0027lineDeptid\u0027 // 查询类型",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.wholeNumber \u003d data.data;",
        "                        vm.guzhang_index_four \u003d echarts.init(document.getElementById(\"guzhang_index_four\"));",
        "                        var option \u003d {",
        "                            tooltip: {",
        "                                trigger: \u0027axis\u0027",
        "                            },",
        "                            noDataLoadingOption: {",
        "                                text: \u0027暂无数据\u0027,",
        "                                effect: \u0027bubble\u0027,",
        "                                effectOption: {",
        "                                    effect: {",
        "                                        n: 0 //气泡个数为0",
        "                                    }",
        "                                }",
        "                            },",
        "                            calculable: true,",
        "                            xAxis: [",
        "                                {",
        "                                    type: \u0027category\u0027,",
        "                                    boundaryGap: false,",
        "                                    data: vm.wholeNumber[0],",
        "                                    name: \u0027日期\u0027",
        "                                }",
        "                            ],",
        "                            yAxis: [",
        "                                {",
        "                                    type: \u0027value\u0027,",
        "                                    name: \u0027次数\u0027",
        "                                }",
        "                            ],",
        "                            series: [",
        "                                {",
        "                                    name: \u0027故障数\u0027,",
        "                                    type: \u0027line\u0027,",
        "                                    smooth: true,",
        "                                    itemStyle: {normal: {areaStyle: {type: \u0027default\u0027}}},",
        "                                    data: vm.wholeNumber[1]",
        "                                }",
        "                            ]",
        "                        };",
        "",
        "                        vm.guzhang_index_four.setOption(option);",
        "                    },",
        "                    error: function (err) {",
        "                        console.error(err);",
        "                    }",
        "                });",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/driverAllActionFrequency2 （接口地址）",
        "             *@name: 首页--驾驶员违规趋势图 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *parameter3: depttype,description:查询类型",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.vehicle_violation_data \u003d [];",
        "            vm.vehicle_violation_method \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/driverAllActionFrequency2\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        depttype: \u0027lineDeptid\u0027, // 查询类型",
        "                        deptid: vm.isDept_id, // 线路id",
        "                        timeType: vm.isTimeType //时间类型",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.vehicle_violation_data \u003d data[\u0027data\u0027];",
        "                        var vehicle_violation_list \u003d [];",
        "                        var weigui_lengend \u003d [];",
        "                        var weiguiX \u003d [];",
        "",
        "",
        "                        if (0 !\u003d\u003d vm.vehicle_violation_data.length) {",
        "                            var length \u003d vm.vehicle_violation_data.length;",
        "                            for (var i \u003d 0; i \u003c length; i++) {",
        "                                vehicle_violation_list.push({",
        "                                    name: vm.vehicle_violation_data[i].name,",
        "                                    type: \u0027line\u0027,",
        "                                    smooth: true,",
        "                                    data: vm.vehicle_violation_data[i].data",
        "                                });",
        "                                weigui_lengend.push(vm.vehicle_violation_data[i].name);",
        "                            }",
        "                            weiguiX \u003d vm.vehicle_violation_data[0].time;",
        "                        } else {",
        "                            weiguiX \u003d [];",
        "                            weigui_lengend \u003d [];",
        "                            vehicle_violation_list \u003d [",
        "                                {",
        "                                    name: [],",
        "                                    type: \u0027line\u0027,",
        "                                    smooth: true,",
        "                                    data: []",
        "                                }",
        "                            ];",
        "                        }",
        "",
        "                        /*--------------------------------------------------------------------------------------------*/",
        "",
        "                        vm.weigui_index_one \u003d echarts.init(document.getElementById(\"weigui_index_one\"));",
        "                        var option \u003d {",
        "                            tooltip: {",
        "                                trigger: \u0027axis\u0027",
        "                            },",
        "                            legend: {",
        "                                data: weigui_lengend,",
        "                            },",
        "                            noDataLoadingOption: {",
        "                                text: \u0027暂无数据\u0027,",
        "                                effect: \u0027bubble\u0027,",
        "                                effectOption: {",
        "                                    effect: {",
        "                                        n: 0 //气泡个数为0",
        "                                    }",
        "                                }",
        "                            },",
        "                            grid: {",
        "                                left: \u00273%\u0027,",
        "                                right: \u00274%\u0027,",
        "                                bottom: \u00273%\u0027,",
        "                                top: \u00271%\u0027,",
        "                            },",
        "                            xAxis: {",
        "                                type: \u0027category\u0027,",
        "                                boundaryGap: false,",
        "                                data: weiguiX,",
        "                                name: \u0027日期\u0027",
        "                            },",
        "                            yAxis: {",
        "                                type: \u0027value\u0027,",
        "                                name: \u0027分数\u0027",
        "                            },",
        "                            series: vehicle_violation_list",
        "                        };",
        "                        vm.weigui_index_one.setOption(option);",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/getMilesTrend （接口地址）",
        "             *@name: 首页--线路里程趋势图 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.xianlu_nenghao_data \u003d [];",
        "            vm.xianlu_licheng_method \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getMilesTrend\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        timeType: vm.isTimeType, //时间类型",
        "                        deptid: vm.isDept_id // 线路id",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.xianlu_nenghao_data \u003d data[\u0027data\u0027];",
        "                        if (\u0027\u0027 \u003d\u003d vm.xianlu_nenghao_data) {",
        "                            vm.xianlu_nenghao \u003d [0];",
        "                            vm.xianlu_nenghaoY \u003d [0];",
        "                        } else {",
        "                            vm.xianlu_nenghao \u003d vm.xianlu_nenghao_data[0];",
        "                            vm.xianlu_nenghaoY \u003d vm.xianlu_nenghao_data[1];",
        "                        }",
        "",
        "                        let option \u003d {",
        "                            tooltip: {",
        "                                formatter: function (params, ticket, callback) {",
        "                                    return vm.xianlu_nenghao[params.dataIndex] + \"\u003cbr /\u003e\" +",
        "                                        params.seriesName + \"：\" + params.value;",
        "                                }",
        "                            },",
        "                            grid: {",
        "                                right: \u002720%\u0027,",
        "                                bottom: \u002713%\u0027,",
        "                                containLabel: true",
        "                            },",
        "                            noDataLoadingOption: {",
        "                                text: \u0027暂无数据\u0027,",
        "                                effect: \u0027bubble\u0027,",
        "                                effectOption: {",
        "                                    effect: {",
        "                                        n: 0 //气泡个数为0",
        "                                    }",
        "                                }",
        "                            },",
        "                            xAxis: {",
        "                                type: \u0027category\u0027,",
        "                                boundaryGap: false,",
        "                                data: vm.xianlu_nenghao,",
        "                                name: \u0027日期\u0027,",
        "                                nameTextStyle: {",
        "                                    color: \u0027rgb(99, 156, 199)\u0027",
        "                                },",
        "                                splitLine: {",
        "                                    show: true,",
        "                                    type: \u0027solid\u0027",
        "                                },",
        "                            },",
        "                            yAxis: {",
        "                                type: \u0027value\u0027,",
        "                                name: \u0027里程KM\u0027,",
        "                                nameTextStyle: {",
        "                                    color: \u0027rgb(99, 156, 199)\u0027",
        "                                },",
        "                            },",
        "                            series: [{",
        "                                name: \u0027里程\u0027,",
        "                                data: vm.xianlu_nenghaoY,",
        "                                type: \u0027line\u0027,",
        "                                smooth: true,",
        "                                itemStyle: {",
        "                                    normal: {",
        "                                        color: \u0027rgb(255, 127, 80)\u0027, //改变折线点的颜色",
        "                                        lineStyle: {",
        "                                            color: \u0027rgb(255, 127, 80)\u0027 //改变折线颜色",
        "                                        }",
        "                                    }",
        "                                },",
        "                            }]",
        "                        };",
        "",
        "                        require(",
        "                            [",
        "                                \u0027echarts/echarts-3\u0027",
        "                                // \u0027echarts/chart/heatmap\u0027, // 使用柱状图就加载bar模块，按需加载",
        "                            ],",
        "                            function (ec) {",
        "                                vm.nenghao_index_four \u003d ec.init(document.getElementById(\u0027nenghao_index_four\u0027));",
        "                                vm.nenghao_index_four.setOption(option);",
        "                            }",
        "                        );",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/getViolationTrendsForType （接口地址）",
        "             *@name: 首页--违规比例图 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *parameter2: violationtype,description:查询类型",
        "             *parameter2: type,description:图形类型",
        "             *parameter2: top,description:数据类型",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.weigui_index_two_data \u003d [];",
        "            vm.weigui_index_two_method \u003d function (start , end) {",
        "                $.ajax({",
        "                    // url: \u0027/api/statistic/getViolationTrendsForType\u0027,",
        "                    // type: \u0027get\u0027,",
        "                    // data: {",
        "                    //     deptid: vm.isDept_id, // 线路id",
        "                    //     timeType: vm.isTimeType, //时间类型",
        "                    //     violationtype: 3,",
        "                    //     type: \u0027scaleMap\u0027,",
        "                    //     top: -1,",
        "                    // },",
        "                    url: \u0027/api/statistic/driverAllActionFrequency2\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        endDate: end,",
        "                        findKey: \u0027lineName\u0027,",
        "                        findVal: vm.isLineName,",
        "                        startDate: start,",
        "                        type: \u0027sum\u0027,",
        "                        violationType: -1",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.weigui_index_two_data \u003d data[\u0027data\u0027];",
        "                        var arr1 \u003d [];",
        "                        var chartArr;",
        "                        if (vm.weigui_index_two_data.length \u003d\u003d\u003d 0) {",
        "                            chartArr \u003d [];",
        "                        } else {",
        "                            for (var tt in vm.weigui_index_two_data) {",
        "                                arr1.push({",
        "                                    value: vm.weigui_index_two_data[tt],",
        "                                    name: $scope.languageDict[tt][$scope.language]",
        "                                });",
        "                            }",
        "                            chartArr \u003d arr1;",
        "                        }",
        "",
        "",
        "                        vm.weigui_index_two \u003d echarts.init(document.getElementById(\"weigui_index_two\"));",
        "                        var option \u003d {",
        "                            tooltip: {",
        "                                trigger: \u0027item\u0027,",
        "                                position: function (p) {",
        "                                    var id \u003d document.getElementById(\u0027weigui_index_two\u0027);",
        "                                    // if ($(id).width() - p[0]- $(id).find(\"div .echarts-tooltip\").width()-20 \u003c0) {",
        "                                    //     p[0] \u003d p[0] - $(id).find(\"div .echarts-tooltip\").width() -40;",
        "                                    // }",
        "                                    // return [$(id).width()/2, $(id).height()/2];",
        "                                    return [p[0], p[1]]",
        "                                },",
        "                                formatter: \"{b} :\u003cbr/\u003e {c} \u003cbr/\u003e ({d}%)\"",
        "                            },",
        "                            noDataLoadingOption: {",
        "                                text: \u0027暂无数据\u0027,",
        "                                effect: \u0027bubble\u0027,",
        "                                effectOption: {",
        "                                    effect: {",
        "                                        n: 0 //气泡个数为0",
        "                                    }",
        "                                }",
        "                            },",
        "                            series: [",
        "                                {",
        "                                    name: \u0027访问来源\u0027,",
        "                                    type: \u0027pie\u0027,",
        "                                    radius: \u002755%\u0027,",
        "                                    center: [\u002750%\u0027, \u002760%\u0027],",
        "                                    data: chartArr,",
        "                                    itemStyle: {",
        "                                        emphasis: {",
        "                                            shadowBlur: 10,",
        "                                            shadowOffsetX: 0,",
        "                                            shadowColor: \u0027rgba(0, 0, 0, 0.5)\u0027",
        "                                        }",
        "                                    }",
        "                                }",
        "                            ]",
        "                        };",
        "",
        "                        vm.weigui_index_two.setOption(option);",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                })",
        "            };",
        "",
        "            gps.getInitGpsPoint(function (data) {",
        "                vm.homeGps \u003d data;",
        "",
        "                vm.gaodeMethod \u003d function () {",
        "                    var map \u003d new AMap.Map(\u0027weiguigaodemap\u0027, {",
        "                        zoom: 10,",
        "                        zooms: [5, 13],",
        "                        center: vm.homeGps //中心点坐标",
        "                    });",
        "                    util.drawLineGPSOnMap(map, vm.isDept_id);",
        "                    // util.drawLineDangerPointsOnMap(map, {",
        "                    //     dataType : 1 , // 1故障  2违规",
        "                    //     timeType: vm.isTimeType,",
        "                    //     lineDeptId: vm.isDept_id",
        "                    // }, true);",
        "                    // 更换黑点打点服务",
        "                    util.drawLineBlackPointsOnMap(map, {",
        "                        blankzonetype: 4,",
        "                        timeType: vm.isTimeType, //时间类型",
        "                        depttype: \u0027lineDeptid\u0027,",
        "                        deptid: vm.isDept_id // 线路id",
        "                    });",
        "                };",
        "            });",
        "            /************************高德地图*******************************/",
        "",
        "            vm.driver_unsafe_data \u003d [];",
        "            vm.driver_unsafe_data_details \u003d [];",
        "",
        "            /**",
        "             API: api/statistic/getViolationDriver （接口地址）",
        "             *@name: 首页--驾驶员不安全行为排行 5 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.driver_unsafe_method \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getViolationDriver\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        deptid: vm.isDept_id, // 线路id",
        "                        timeType: vm.isTimeType //时间类型",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.driver_unsafe_head \u003d [",
        "                            {name: \u0027rank\u0027, cn: \u0027排行\u0027},",
        "                            {name: \u0027driver\u0027, cn: \u0027驾驶员\u0027},",
        "                            {name: \u0027total\u0027, cn: \u0027违规总数\u0027},",
        "                            {name: \u0027score\u0027, cn: \u0027分数\u0027},",
        "                        ];",
        "                        vm.driver_unsafe_data_details \u003d data[\u0027data\u0027];",
        "                        vm.driver_unsafe_data \u003d data[\u0027data\u0027].slice(0, 5);",
        "",
        "                        if (data[\u0027data\u0027].length \u003d\u003d\u003d 0) {",
        "                            vm.isShow \u003d true;",
        "                        } else {",
        "                            vm.isShow \u003d false;",
        "                        }",
        "",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                })",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/getAlarmCount （接口地址）",
        "             *@name: 首页--获取故障总数 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            // vm.fault \u003d [];",
        "            vm.guzhang_Statistics \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getAlarmCount\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        timeType: vm.isTimeType, //时间类型",
        "                        deptid: vm.isDept_id // 线路id",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.fault \u003d data[\u0027data\u0027];",
        "                        vm.guZhangBefore_data \u003d data[\u0027beforedata\u0027];",
        "                        vm.ordinary \u003d util.percentage(vm.fault[\u0027ordinary\u0027], vm.guZhangBefore_data[\u0027ordinary\u0027], \u0027%\u0027);",
        "                        vm.alarm \u003d util.percentage(vm.fault[\u0027alarm\u0027], vm.guZhangBefore_data[\u0027alarm\u0027], \u0027%\u0027);",
        "                        vm.serious \u003d util.percentage(vm.fault[\u0027serious\u0027], vm.guZhangBefore_data[\u0027serious\u0027], \u0027%\u0027);",
        "                        vm.car \u003d util.percentage(vm.fault[\u0027car\u0027], vm.guZhangBefore_data[\u0027car\u0027], \u0027\u0027);",
        "                        $scope.$apply();",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                })",
        "            };",
        "",
        "            /**",
        "             API: api/statistic/getViolationDriverCount （接口地址）",
        "             *@name: 首页--违规导航标签 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            // vm.irregularities_method_data \u003d [];",
        "            vm.irregularities_method \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getViolationDriverCount\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        timeType: vm.isTimeType, //时间类型",
        "                        deptid: vm.isDept_id // 线路id",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.irregularities_method_data \u003d data[\u0027data\u0027];",
        "                        vm.weiGuiBefore_data \u003d data[\u0027beforedata\u0027];",
        "                        vm.all \u003d util.percentage(vm.irregularities_method_data[\u0027all\u0027], vm.weiGuiBefore_data[\u0027all\u0027], \u0027%\u0027);",
        "                        vm.driverCnt \u003d util.percentage(vm.irregularities_method_data[\u0027driverCnt\u0027], vm.weiGuiBefore_data[\u0027driverCnt\u0027], \u0027\u0027);",
        "                        vm.carCnt \u003d util.percentage(vm.irregularities_method_data[\u0027carCnt\u0027], vm.weiGuiBefore_data[\u0027carCnt\u0027], \u0027\u0027);",
        "                        $scope.$apply();",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "            vm.vehicle_Failure_details_data \u003d [];",
        "            vm.vehicle_Failure_Data \u003d [];",
        "",
        "            /**",
        "             API: api/statistic/getBreakCarRank （接口地址）",
        "             *@name: 首页--车辆故障排名 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *parameter2: count,description:行数",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.vehicle_Failure \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getBreakCarRank\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        deptid: vm.isDept_id, // 线路id",
        "                        timeType: vm.isTimeType, //时间类型",
        "                        count: 5 // 行数",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.vehicle_head \u003d [",
        "                            {name: \u0027rank\u0027, chinese: \u0027排名\u0027},",
        "                            {name: \u0027driver\u0027, chinese: \u0027线路\u0027},",
        "                            {name: \u0027total\u0027, chinese: \u0027车牌号\u0027},",
        "                            {name: \u0027score\u0027, chinese: \u0027次数\u0027},",
        "                        ]",
        "                        vm.vehicle_Failure_details_data \u003d data.data.body.data;",
        "                        vm.vehicle_head \u003d data.data.head;",
        "",
        "                        if (vm.vehicle_Failure_details_data.length \u003d\u003d\u003d 0) {",
        "                            vm.isShow2 \u003d true;",
        "                        } else {",
        "                            vm.isShow2 \u003d false;",
        "                        }",
        "",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                })",
        "            };",
        "",
        "            /*---------------------------------待修故障统计------------------------------------------------------------------*/",
        "",
        "            vm.to_be_repaired_fault_data \u003d [];",
        "",
        "            /**",
        "             API: api/statistic/getAlarmToday （接口地址）",
        "             *@name: 首页--待修故障统计 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *parameter2: count,description:行数",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            vm.to_be_repaired_fault_method \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getAlarmToday\u0027,// 待修故障统计  只取今天",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        deptid: vm.isDept_id, // 线路id",
        "                        timeType: vm.isTimeType, //时间类型",
        "                        count: 5 // 行数",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.to_be_repaired_fault_head \u003d [",
        "                            {name: \u0027rank\u0027, cn: \u0027排名\u0027},",
        "                            {name: \u0027vno\u0027, cn: \u0027车牌号\u0027},",
        "                            {name: \u0027rank\u0027, cn: \u0027故障总数\u0027},",
        "                            {name: \u0027rank\u0027, cn: \u0027一般故障数\u0027},",
        "                            {name: \u0027rank\u0027, cn: \u0027严重故障数\u0027},",
        "                        ];",
        "                        vm.to_be_repaired_fault_data \u003d data[\u0027data\u0027];",
        "",
        "                        if (data[\u0027data\u0027].length \u003d\u003d\u003d 0) {",
        "                            vm.isShow3 \u003d true;",
        "                        } else {",
        "                            vm.isShow3 \u003d false;",
        "                        }",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                })",
        "            };",
        "            vm.showDetail \u003d false;",
        "            vm.faultTableShow \u003d false;",
        "",
        "            /**",
        "             API: api/statistic/getEnergyCount （接口地址）",
        "             *@name: 首页--获取能耗标签数据 （接口描述）",
        "             *@author: 魏泽宇  （作者信息）",
        "             *@edittime: 2020-06-05",
        "             *@mode: get（传输方式）",
        "             *",
        "             *@param: \\Http\\Request $request （请求参数）",
        "             *parameter1: deptid,description:线路id",
        "             *parameter2: timeType,description:类型，0\u003d昨天，1\u003d近七天，2\u003d本月，3\u003d上月，4\u003d今年，5\u003d去年",
        "             *@return: \\Illuminate\\Http\\JsonResponse|mixed",
        "             *@throws: \\App\\Exception\\ParamException",
        "             */",
        "            // vm.energy_consumption_data \u003d [];",
        "            vm.energy_consumption_method \u003d function () {",
        "                $.ajax({",
        "                    url: \u0027/api/statistic/getEnergyCount\u0027,",
        "                    type: \u0027get\u0027,",
        "                    data: {",
        "                        deptid: vm.isDept_id, // 线路id",
        "                        timeType: vm.isTimeType //时间类型",
        "                    },",
        "                    dataType: \u0027json\u0027,",
        "                    success: function (data) {",
        "                        vm.energy_consumption_data \u003d data[\u0027data\u0027];",
        "                        vm.nengHaoBefore_data \u003d data[\u0027beforedata\u0027];",
        "                        vm.accruedMiles \u003d util.percentage(vm.energy_consumption_data[\u0027accruedMiles\u0027], vm.nengHaoBefore_data[\u0027accruedMiles\u0027], \u0027%\u0027);",
        "                        vm.runTime \u003d util.percentage(vm.energy_consumption_data[\u0027runTime\u0027], vm.nengHaoBefore_data[\u0027runTime\u0027], \u0027%\u0027);",
        "                        vm.hundredElec \u003d util.percentage(vm.energy_consumption_data[\u0027hundredElec\u0027], vm.nengHaoBefore_data[\u0027hundredElec\u0027], \u0027%\u0027);",
        "                        vm.hundredGas \u003d util.percentage(vm.energy_consumption_data[\u0027hundredGas\u0027], vm.nengHaoBefore_data[\u0027hundredGas\u0027], \u0027%\u0027);",
        "                        vm.hundredFule \u003d util.percentage(vm.energy_consumption_data[\u0027hundredFule\u0027], vm.nengHaoBefore_data[\u0027hundredFule\u0027], \u0027%\u0027);",
        "                        $scope.$apply();",
        "                    },",
        "                    error: function (err) {",
        "                    }",
        "                });",
        "            };",
        "",
        "            $(\".img_1\").on({",
        "                mouseover: function () {",
        "                    $(\".img_1\u003eimg\").attr(\"src\", \"/heu_assets/images/icon/2.png\");",
        "                },",
        "                mouseout: function () {",
        "                    $(\".img_1\u003eimg\").attr(\"src\", \"/heu_assets/images/icon/Snipaste_2018-09-19_12-11-32_23.png\");",
        "                }",
        "            });",
        "            $(\".img_2\").on({",
        "                mouseover: function () {",
        "                    $(\".img_2\u003eimg\").attr(\"src\", \"/heu_assets/images/icon/2.1.png\");",
        "                },",
        "                mouseout: function () {",
        "                    $(\".img_2\u003eimg\").attr(\"src\", \"/heu_assets/images/icon/Snipaste_2018-09-19_12-11-32_20.png\");",
        "                }",
        "            });",
        "            $(\".img_3\").on({",
        "                mouseover: function () {",
        "                    $(\".img_3\u003eimg\").attr(\"src\", \"/heu_assets/images/icon/2.3.png\");",
        "                },",
        "                mouseout: function () {",
        "                    $(\".img_3\u003eimg\").attr(\"src\", \"/heu_assets/images/icon/Snipaste_2018-09-19_12-11-32_26.png\");",
        "                }",
        "            });",
        "            $(\".img_4\").on({",
        "                mouseover: function () {",
        "                    $(\".img_4\u003eimg\").attr(\"src\", \"/heu_assets/images/icon/2.4.png\");",
        "                },",
        "                mouseout: function () {",
        "                    $(\".img_4\u003eimg\").attr(\"src\", \"/heu_assets/images/icon/Snipaste_2018-09-19_12-11-32_28.png\");",
        "                }",
        "            });",
        "            $(\".img_5\").on({",
        "                mouseover: function () {",
        "                    $(\".img_5\u003eimg\").attr(\"src\", \"/heu_assets/images/icon/2.5.png\");",
        "                },",
        "                mouseout: function () {",
        "                    $(\".img_5\u003eimg\").attr(\"src\", \"/heu_assets/images/icon/Snipaste_2018-09-19_12-11-32_30.png\");",
        "                }",
        "            });",
        "            $(\".img_6\").on({",
        "                mouseover: function () {",
        "                    $(\".img_6\u003eimg\").attr(\"src\", \"/heu_assets/images/icon/2.6.png\");",
        "                },",
        "                mouseout: function () {",
        "                    $(\".img_6\u003eimg\").attr(\"src\", \"/heu_assets/images/icon/Snipaste_2018-09-19_12-11-32_32.png\");",
        "                }",
        "            });",
        "",
        "            window.onresize \u003d function () {",
        "                if (undefined !\u003d vm.gaikuang_echarts_one) {",
        "                    vm.gaikuang_echarts_one.resize();",
        "                }",
        "                if (undefined !\u003d vm.gaikuang_echarts_two) {",
        "                    vm.gaikuang_echarts_two.resize();",
        "                }",
        "                if (undefined !\u003d vm.guzhang_index_one) {",
        "                    vm.guzhang_index_one.resize();",
        "                }",
        "                if (undefined !\u003d vm.guzhang_index_two) {",
        "                    vm.guzhang_index_two.resize();",
        "                }",
        "                if (undefined !\u003d vm.guzhang_index_three) {",
        "                    vm.guzhang_index_three.resize();",
        "                }",
        "                if (undefined !\u003d vm.guzhang_index_four) {",
        "                    vm.guzhang_index_four.resize();",
        "                }",
        "                if (undefined !\u003d vm.weigui_index_one) {",
        "                    vm.weigui_index_one.resize();",
        "                }",
        "                if (undefined !\u003d vm.weigui_index_two) {",
        "                    vm.weigui_index_two.resize();",
        "                }",
        "                if (undefined !\u003d vm.nenghao_index_one) {",
        "                    vm.nenghao_index_one.resize();",
        "                }",
        "                if (undefined !\u003d vm.nenghao_index_two) {",
        "                    vm.nenghao_index_two.resize();",
        "                }",
        "                if (undefined !\u003d vm.nenghao_index_three) {",
        "                    vm.nenghao_index_three.resize();",
        "                }",
        "                if (undefined !\u003d vm.nenghao_index_four) {",
        "                    vm.nenghao_index_four.resize();",
        "                }",
        "            };",
        "",
        "            vm.spanSElONE \u003d false;",
        "            vm.spanSElTWO \u003d false;",
        "            vm.spanSElTHREE \u003d false;",
        "            vm.spanSElFOUR \u003d false;",
        "            vm.spanSElFIVE \u003d false;",
        "            vm.spanSElSIX \u003d false;",
        "",
        "            $(\u0027#gaikuangDivId\u0027).resize(function () {",
        "            });",
        "            $(\u0027#guzhangDivId\u0027).resize(function () {",
        "            });",
        "            $(\u0027#weiguiDivID\u0027).resize(function () {",
        "            });",
        "            $(\u0027#nenghaoDivId\u0027).resize(function () {",
        "            });",
        "",
        "            vm.timeTypeSelect \u003d function () { //选择时间 查询事件",
        "",
        "                /*",
        "                * 时间选择 线路选择 查询判断",
        "                * */",
        "                if (vm.showDiv.gaikuang.isShow) {",
        "                    vm.gaikuangAnquan_method();",
        "                    vm.gaikuangXinxi_method();",
        "                    vm.gaikuangOne_method();",
        "                    // vm.gaikuangTwo_method();",
        "                    vm.gaikuangNenghao_method();",
        "                } else if (vm.showDiv.guzhang.isShow) {",
        "                    vm.weigui_index_two_method();",
        "                    vm.vehicle_Failure();",
        "                    vm.guzhang_index_two_method();",
        "                    vm.guzhang_index_oneData();",
        "                    vm.guzhang_Statistics();",
        "                    vm.to_be_repaired_fault_method();",
        "                    vm.fourMethod();",
        "                    vm.method();",
        "                } else if (vm.showDiv.weigui.isShow) {",
        "                    vm.gaodeMethod();",
        "                    vm.vehicle_violation_method();",
        "                    // vm.weigui_index_two_method();",
        "                    vm.irregularities_method();",
        "                    vm.driver_unsafe_method();",
        "                } else if (vm.showDiv.nenghao.isShow) {",
        "                    vm.ele_method();",
        "                    vm.nenghao_data();",
        "                    vm.gas_nenghao_method();",
        "                    vm.miles_method();",
        "                    vm.energy_consumption_ele_method();",
        "                    vm.xianlu_licheng_method();",
        "                    vm.energy_consumption_method();",
        "                }",
        "                vm.obtainTimeMethod();",
        "            };",
        "            vm.showlabel \u003d {",
        "                spanSElONE: { // 昨天",
        "                    isShow: false,",
        "                    show: function (data_val) {",
        "                        vm.showlabel.clearDiv();",
        "                        vm.showlabel.spanSElONE.isShow \u003d true;",
        "                        vm.isTimeType \u003d data_val;",
        "                        if (\u0027\u0027 \u003d\u003d vm.isDept_id) return;",
        "                        vm.timeTypeSelect();",
        "                    }",
        "                },",
        "                spanSElTWO: { // 近七天",
        "                    isShow: true,",
        "                    show: function (data_val) {",
        "                        vm.showlabel.clearDiv();",
        "                        vm.showlabel.spanSElTWO.isShow \u003d true;",
        "                        vm.isTimeType \u003d data_val;",
        "                        if (\u0027\u0027 \u003d\u003d vm.isDept_id) return;",
        "                        vm.timeTypeSelect();",
        "                    },",
        "                    batteryErayWarningStatisics: {",
        "                        isShow: false,",
        "                        show: function (data_val) {",
        "                            vm.showlabel.closeDetail();",
        "                            vm.showlabel.spanSElTWO.batteryErayWarningStatisics.isShow \u003d true;",
        "                            vm.isTimeType \u003d data_val;",
        "                            if (\u0027\u0027 \u003d\u003d vm.isDept_id) return;",
        "                            vm.timeTypeSelect();",
        "                        }",
        "                    }",
        "                },",
        "                spanSElTHREE: { // 本月",
        "",
        "                    isShow: false,",
        "                    show: function (data_val) {",
        "                        vm.showlabel.clearDiv();",
        "                        vm.showlabel.spanSElTHREE.isShow \u003d true;",
        "                        vm.isTimeType \u003d data_val;",
        "                        if (\u0027\u0027 \u003d\u003d vm.isDept_id) return;",
        "                        vm.timeTypeSelect();",
        "                    }",
        "                },",
        "                spanSElFOUR: { // 上月",
        "                    isShow: false,",
        "                    show: function (data_val) {",
        "                        vm.showlabel.clearDiv();",
        "                        vm.showlabel.spanSElFOUR.isShow \u003d true;",
        "                        vm.isTimeType \u003d data_val;",
        "                        if (\u0027\u0027 \u003d\u003d vm.isDept_id) return;",
        "                        vm.timeTypeSelect();",
        "                    }",
        "                },",
        "                spanSElFIVE: { // 今年",
        "                    isShow: false,",
        "                    show: function (data_val) {",
        "                        vm.showlabel.clearDiv();",
        "                        vm.showlabel.spanSElFIVE.isShow \u003d true;",
        "                        vm.isTimeType \u003d data_val;",
        "                        if (\u0027\u0027 \u003d\u003d vm.isDept_id) return;",
        "                        vm.timeTypeSelect();",
        "                    }",
        "                },",
        "                spanSElSIX: { // 去年",
        "                    isShow: false,",
        "                    show: function (data_val) {",
        "                        vm.showlabel.clearDiv();",
        "                        vm.showlabel.spanSElSIX.isShow \u003d true;",
        "                        vm.isTimeType \u003d data_val;",
        "                        if (\u0027\u0027 \u003d\u003d vm.isDept_id) return;",
        "                        vm.timeTypeSelect();",
        "                    }",
        "                },",
        "                clearDiv: function () {",
        "                    vm.showlabel.spanSElONE.isShow \u003d false;",
        "                    vm.showlabel.spanSElTWO.isShow \u003d false;",
        "                    vm.showlabel.spanSElTHREE.isShow \u003d false;",
        "                    vm.showlabel.spanSElFOUR.isShow \u003d false;",
        "                    vm.showlabel.spanSElFIVE.isShow \u003d false;",
        "                    vm.showlabel.spanSElSIX.isShow \u003d false;",
        "                },",
        "                closeDetail: function () {",
        "                    vm.showlabel.spanSElONE.batteryErayWarningStatisics.isShow \u003d false;",
        "                }",
        "            };",
        "",
        "",
        "            vm.trFalse \u003d true;",
        "            /*模态框确定*/",
        "            vm.modalClick \u003d function () {",
        "                vm.timeTypeSelect();",
        "            };",
        "            /*------------------------------------------------\u003e  底部  \u003c------------------------------------------------------*/",
        "",
        "            let dId \u003d \u0027\u0027;",
        "            let lNa \u003d \u0027\u0027;",
        "            let checkNode \u003d {};",
        "            vm.catchObj \u003d {};",
        "            vm.myTreeModal \u003d () \u003d\u003e {",
        "                vm.isLineName \u003d lNa;",
        "                vm.isDept_id \u003d dId;",
        "                vm.catchObj \u003d checkNode;",
        "                if (\u0027\u0027 !\u003d vm.isDept_id \u0026\u0026 \u0027\u0027 !\u003d vm.isLineName) {",
        "",
        "                    /*",
        "                    * 时间选择 线路选择 查询判断",
        "                    * */",
        "                    if (vm.showDiv.gaikuang.isShow) {",
        "                        vm.gaikuangAnquan_method();",
        "                        vm.gaikuangXinxi_method();",
        "                        vm.gaikuangOne_method();",
        "                        // vm.gaikuangTwo_method();",
        "                        vm.gaikuangNenghao_method();",
        "                    } else if (vm.showDiv.guzhang.isShow) {",
        "                        vm.weigui_index_two_method();",
        "                        vm.vehicle_Failure();",
        "                        vm.guzhang_index_two_method();",
        "                        vm.guzhang_index_oneData();",
        "                        vm.guzhang_Statistics();",
        "                        vm.to_be_repaired_fault_method();",
        "                        vm.fourMethod();",
        "                        vm.method();",
        "                    } else if (vm.showDiv.weigui.isShow) {",
        "                        vm.gaodeMethod();",
        "                        vm.vehicle_violation_method();",
        "                        // vm.weigui_index_two_method();",
        "                        vm.irregularities_method();",
        "                        vm.driver_unsafe_method();",
        "                    } else if (vm.showDiv.nenghao.isShow) {",
        "                        vm.ele_method();",
        "                        vm.nenghao_data();",
        "                        vm.gas_nenghao_method();",
        "                        vm.miles_method();",
        "                        vm.energy_consumption_ele_method();",
        "                        vm.xianlu_licheng_method();",
        "                        vm.energy_consumption_method();",
        "                    }",
        "                    vm.obtainTimeMethod();",
        "                }",
        "",
        "            };",
        "            /* 地图选择框 */",
        "            vm.selectIrreg \u003d [",
        "                {en: \"dangerous_driving\", CN: \"危险驾驶\"},",
        "                {en: \"Distraction\", CN: \"分神提醒\"},",
        "                {en: \"Smoking_alarm\", CN: \"吸烟报警\"},",
        "                {en: \"Look_right_and_left\", CN: \"左顾右盼\"},",
        "                {en: \"Phone\", CN: \"打电话\"},",
        "                {en: \"smoking\", CN: \"抽烟\"},",
        "                {en: \"Yawn\", CN: \"打哈欠\"},",
        "                {en: \"be_demobilized\", CN: \"离岗\"},",
        "                {en: \"Camera_screen\", CN: \"摄像头遮挡\"},",
        "                {en: \"Starting_rapidly\", CN: \"起步急加速\"},",
        "                {en: \"Rapid_acceleration\", CN: \"急加速\"},",
        "                {en: \"Rapid_deceleration\", CN: \"急减速\"},",
        "                {en: \"Uncivilized_whistle\", CN: \"不文明鸣笛\"},",
        "                {en: \"Zebra_crossing_overspeed\", CN: \"斑马线超速\"},",
        "                {en: \"Lane_left_line\", CN: \"车道左压线\"},",
        "                {en: \"Right_line_of_lane\", CN: \"车道右压线\"},",
        "                {en: \"Low_speed_collision\", CN: \"低速碰撞\"},",
        "                {en: \"Car_distance_near\", CN: \"车距过近\"},",
        "                {en: \"openDoorNotStopYet\", CN: \"车辆未停稳开车门\"},",
        "                {en: \" doorIsNotClosed\", CN: \"门未关起步\"},",
        "                {en: \"IrregularImportExportStations\", CN: \"不规范进出站\"},",
        "                {en: \"Nonstandard_turn\", CN: \"不规范转弯\"},",
        "                {en: \"Urgent_stop\", CN: \"急停\"},",
        "                {en: \"LaneKeepingCapacityDecline\", CN: \"车道保持能力下降\"}",
        "            ];",
        "",
        "",
        "            //tree 模态框关闭",
        "            vm.closeMyTreeModal \u003d () \u003d\u003e {",
        "                window.sessionStorage.setItem(\"global_checked_node\", JSON.stringify(vm.catchObj));",
        "            };",
        "            let global \u003d \u0027\u0027;",
        "            let obtainSession \u003d () \u003d\u003e {",
        "                global \u003d JSON.parse(window.sessionStorage.getItem(\"global_checked_node\"));",
        "                if (null !\u003d global \u0026\u0026 undefined !\u003d global) {",
        "                    vm.isDept_id \u003d global.deptId;",
        "                    vm.isLineName \u003d global.lineName;",
        "                    $timeout(function () {",
        "                        vm.obtainTimeMethod();",
        "                        vm.gaikuangAnquan_method();",
        "                        vm.gaikuangXinxi_method();",
        "                        vm.gaikuangOne_method();",
        "                        vm.gaikuangTwo_method();",
        "                        vm.gaikuangNenghao_method();",
        "                    }, 1500);",
        "                }",
        "            };",
        "            obtainSession();",
        "",
        "            /*",
        "            * 接收tree 返回数据",
        "            * */",
        "            $timeout(function () {",
        "                $scope.$on(\u0027to-homeTreeDate\u0027, function (event, data) {",
        "                    checkNode \u003d data.obj;",
        "                    dId \u003d data.id;",
        "                    lNa \u003d data.name;",
        "                });",
        "            }, 1000);",
        "",
        "            /*",
        "            *  线路选择提示",
        "            * */",
        "            $timeout(function () {",
        "                if (\u0027\u0027 \u003d\u003d vm.isLineName) {",
        "                    vm.myAlert \u003d true;",
        "                    $timeout(function () {",
        "                        vm.myAlert \u003d false;",
        "                    }, 3500);",
        "                }",
        "            }, 1500);",
        "",
        "",
        "        }]);",
        ""
      ]
    }
  ]
}
